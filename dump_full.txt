Module {
    types: {
        [0]: Type {
            name: None,
            inner: Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        },
        [1]: Type {
            name: None,
            inner: Array {
                base: [0],
                size: Constant(
                    80,
                ),
                stride: 8,
            },
        },
        [2]: Type {
            name: None,
            inner: Array {
                base: [0],
                size: Constant(
                    8,
                ),
                stride: 8,
            },
        },
        [3]: Type {
            name: None,
            inner: Scalar(
                Scalar {
                    kind: Uint,
                    width: 4,
                },
            ),
        },
        [4]: Type {
            name: None,
            inner: Array {
                base: [3],
                size: Constant(
                    128,
                ),
                stride: 4,
            },
        },
        [5]: Type {
            name: Some(
                "SHA512_CTX",
            ),
            inner: Struct {
                members: [
                    StructMember {
                        name: Some(
                            "state",
                        ),
                        ty: [2],
                        binding: None,
                        offset: 0,
                    },
                    StructMember {
                        name: Some(
                            "count",
                        ),
                        ty: [0],
                        binding: None,
                        offset: 64,
                    },
                    StructMember {
                        name: Some(
                            "buffer",
                        ),
                        ty: [4],
                        binding: None,
                        offset: 72,
                    },
                    StructMember {
                        name: Some(
                            "fill",
                        ),
                        ty: [3],
                        binding: None,
                        offset: 584,
                    },
                ],
                span: 592,
            },
        },
        [6]: Type {
            name: None,
            inner: Pointer {
                base: [4],
                space: Function,
            },
        },
        [7]: Type {
            name: None,
            inner: Array {
                base: [3],
                size: Constant(
                    64,
                ),
                stride: 4,
            },
        },
        [8]: Type {
            name: None,
            inner: Pointer {
                base: [7],
                space: Function,
            },
        },
        [9]: Type {
            name: None,
            inner: Pointer {
                base: [2],
                space: Function,
            },
        },
        [10]: Type {
            name: None,
            inner: Pointer {
                base: [5],
                space: Function,
            },
        },
        [11]: Type {
            name: None,
            inner: Array {
                base: [3],
                size: Constant(
                    256,
                ),
                stride: 4,
            },
        },
        [12]: Type {
            name: None,
            inner: Pointer {
                base: [11],
                space: Function,
            },
        },
        [13]: Type {
            name: Some(
                "Input",
            ),
            inner: Struct {
                members: [
                    StructMember {
                        name: Some(
                            "data",
                        ),
                        ty: [11],
                        binding: None,
                        offset: 0,
                    },
                    StructMember {
                        name: Some(
                            "len",
                        ),
                        ty: [3],
                        binding: None,
                        offset: 1024,
                    },
                ],
                span: 1028,
            },
        },
        [14]: Type {
            name: None,
            inner: Array {
                base: [13],
                size: Constant(
                    4,
                ),
                stride: 1028,
            },
        },
        [15]: Type {
            name: None,
            inner: Array {
                base: [7],
                size: Constant(
                    4,
                ),
                stride: 256,
            },
        },
        [16]: Type {
            name: None,
            inner: Vector {
                size: Tri,
                scalar: Scalar {
                    kind: Uint,
                    width: 4,
                },
            },
        },
    },
    special_types: SpecialTypes {
        ray_desc: None,
        ray_intersection: None,
        ray_vertex_return: None,
        predeclared_types: {},
    },
    constants: {
        [0]: Constant {
            name: Some(
                "K",
            ),
            ty: [1],
            init: [80],
        },
    },
    overrides: {},
    global_variables: {
        [0]: GlobalVariable {
            name: Some(
                "inputs",
            ),
            space: Storage {
                access: StorageAccess(
                    LOAD,
                ),
            },
            binding: Some(
                ResourceBinding {
                    group: 0,
                    binding: 0,
                },
            ),
            ty: [14],
            init: None,
        },
        [1]: GlobalVariable {
            name: Some(
                "output",
            ),
            space: Storage {
                access: StorageAccess(
                    LOAD | STORE,
                ),
            },
            binding: Some(
                ResourceBinding {
                    group: 0,
                    binding: 1,
                },
            ),
            ty: [15],
            init: None,
        },
    },
    global_expressions: {
        [0]: Literal(
            U64(
                4794697086780616226,
            ),
        ),
        [1]: Literal(
            U64(
                8158064640168781261,
            ),
        ),
        [2]: Literal(
            U64(
                13096744586834688815,
            ),
        ),
        [3]: Literal(
            U64(
                16840607885511220156,
            ),
        ),
        [4]: Literal(
            U64(
                4131703408338449720,
            ),
        ),
        [5]: Literal(
            U64(
                6480981068601479193,
            ),
        ),
        [6]: Literal(
            U64(
                10538285296894168987,
            ),
        ),
        [7]: Literal(
            U64(
                12329834152419229976,
            ),
        ),
        [8]: Literal(
            U64(
                15566598209576043074,
            ),
        ),
        [9]: Literal(
            U64(
                1334009975649890238,
            ),
        ),
        [10]: Literal(
            U64(
                2608012711638119052,
            ),
        ),
        [11]: Literal(
            U64(
                6128411473006802146,
            ),
        ),
        [12]: Literal(
            U64(
                8268148722764581231,
            ),
        ),
        [13]: Literal(
            U64(
                9286055187155687089,
            ),
        ),
        [14]: Literal(
            U64(
                11230858885718282805,
            ),
        ),
        [15]: Literal(
            U64(
                871938109660014228,
            ),
        ),
        [16]: Literal(
            U64(
                16472876342353939154,
            ),
        ),
        [17]: Literal(
            U64(
                17275323862435702243,
            ),
        ),
        [18]: Literal(
            U64(
                1135362057144423861,
            ),
        ),
        [19]: Literal(
            U64(
                2597628984639134821,
            ),
        ),
        [20]: Literal(
            U64(
                3308224258029322869,
            ),
        ),
        [21]: Literal(
            U64(
                5365058923640841347,
            ),
        ),
        [22]: Literal(
            U64(
                6679025012923562964,
            ),
        ),
        [23]: Literal(
            U64(
                8573033837759648693,
            ),
        ),
        [24]: Literal(
            U64(
                10970295158949994411,
            ),
        ),
        [25]: Literal(
            U64(
                12119686244451234320,
            ),
        ),
        [26]: Literal(
            U64(
                12683024718118986047,
            ),
        ),
        [27]: Literal(
            U64(
                13788192230050041572,
            ),
        ),
        [28]: Literal(
            U64(
                14330467153632333762,
            ),
        ),
        [29]: Literal(
            U64(
                15395433587784984357,
            ),
        ),
        [30]: Literal(
            U64(
                489312712824947311,
            ),
        ),
        [31]: Literal(
            U64(
                1452737877330783856,
            ),
        ),
        [32]: Literal(
            U64(
                2861767655752347644,
            ),
        ),
        [33]: Literal(
            U64(
                3322285676063803686,
            ),
        ),
        [34]: Literal(
            U64(
                5560940570517711597,
            ),
        ),
        [35]: Literal(
            U64(
                5996557281743188959,
            ),
        ),
        [36]: Literal(
            U64(
                7280758554555802590,
            ),
        ),
        [37]: Literal(
            U64(
                8532644243296465576,
            ),
        ),
        [38]: Literal(
            U64(
                9350256976987008742,
            ),
        ),
        [39]: Literal(
            U64(
                10552545826968843579,
            ),
        ),
        [40]: Literal(
            U64(
                11727347734174303076,
            ),
        ),
        [41]: Literal(
            U64(
                12113106623233404929,
            ),
        ),
        [42]: Literal(
            U64(
                14000437183269869457,
            ),
        ),
        [43]: Literal(
            U64(
                14369950271660146224,
            ),
        ),
        [44]: Literal(
            U64(
                15101387698204529176,
            ),
        ),
        [45]: Literal(
            U64(
                15463397548674623760,
            ),
        ),
        [46]: Literal(
            U64(
                17586052441742319658,
            ),
        ),
        [47]: Literal(
            U64(
                1182934255886127544,
            ),
        ),
        [48]: Literal(
            U64(
                1847814050463011016,
            ),
        ),
        [49]: Literal(
            U64(
                2177327727835720531,
            ),
        ),
        [50]: Literal(
            U64(
                2830643537854262169,
            ),
        ),
        [51]: Literal(
            U64(
                3796741975233480872,
            ),
        ),
        [52]: Literal(
            U64(
                4115178125766777443,
            ),
        ),
        [53]: Literal(
            U64(
                5681478168544905931,
            ),
        ),
        [54]: Literal(
            U64(
                6601373596472566643,
            ),
        ),
        [55]: Literal(
            U64(
                7507060721942968483,
            ),
        ),
        [56]: Literal(
            U64(
                8399075790359081724,
            ),
        ),
        [57]: Literal(
            U64(
                8693463985226723168,
            ),
        ),
        [58]: Literal(
            U64(
                9568029438360202098,
            ),
        ),
        [59]: Literal(
            U64(
                10144078919501101548,
            ),
        ),
        [60]: Literal(
            U64(
                10430055236837252648,
            ),
        ),
        [61]: Literal(
            U64(
                11840083180663258601,
            ),
        ),
        [62]: Literal(
            U64(
                13761210420658862357,
            ),
        ),
        [63]: Literal(
            U64(
                14299343276471374635,
            ),
        ),
        [64]: Literal(
            U64(
                14566680578165727644,
            ),
        ),
        [65]: Literal(
            U64(
                15097957966210449927,
            ),
        ),
        [66]: Literal(
            U64(
                16922976911328602910,
            ),
        ),
        [67]: Literal(
            U64(
                17689382322260857208,
            ),
        ),
        [68]: Literal(
            U64(
                500013540394364858,
            ),
        ),
        [69]: Literal(
            U64(
                748580250866718886,
            ),
        ),
        [70]: Literal(
            U64(
                1242879168328830382,
            ),
        ),
        [71]: Literal(
            U64(
                1977374033974150939,
            ),
        ),
        [72]: Literal(
            U64(
                2944078676154940804,
            ),
        ),
        [73]: Literal(
            U64(
                3659926193048069267,
            ),
        ),
        [74]: Literal(
            U64(
                4368137639120453308,
            ),
        ),
        [75]: Literal(
            U64(
                4836135668995329356,
            ),
        ),
        [76]: Literal(
            U64(
                5532061633213252278,
            ),
        ),
        [77]: Literal(
            U64(
                6448918945643986474,
            ),
        ),
        [78]: Literal(
            U64(
                6902733635092675308,
            ),
        ),
        [79]: Literal(
            U64(
                7801388544844847127,
            ),
        ),
        [80]: Compose {
            ty: [1],
            components: [
                [0],
                [1],
                [2],
                [3],
                [4],
                [5],
                [6],
                [7],
                [8],
                [9],
                [10],
                [11],
                [12],
                [13],
                [14],
                [15],
                [16],
                [17],
                [18],
                [19],
                [20],
                [21],
                [22],
                [23],
                [24],
                [25],
                [26],
                [27],
                [28],
                [29],
                [30],
                [31],
                [32],
                [33],
                [34],
                [35],
                [36],
                [37],
                [38],
                [39],
                [40],
                [41],
                [42],
                [43],
                [44],
                [45],
                [46],
                [47],
                [48],
                [49],
                [50],
                [51],
                [52],
                [53],
                [54],
                [55],
                [56],
                [57],
                [58],
                [59],
                [60],
                [61],
                [62],
                [63],
                [64],
                [65],
                [66],
                [67],
                [68],
                [69],
                [70],
                [71],
                [72],
                [73],
                [74],
                [75],
                [76],
                [77],
                [78],
                [79],
            ],
        },
    },
    functions: {
        [0]: Function {
            name: Some(
                "ROR",
            ),
            arguments: [
                FunctionArgument {
                    name: Some(
                        "x",
                    ),
                    ty: [0],
                    binding: None,
                },
                FunctionArgument {
                    name: Some(
                        "n",
                    ),
                    ty: [3],
                    binding: None,
                },
            ],
            result: Some(
                FunctionResult {
                    ty: [0],
                    binding: None,
                },
            ),
            local_variables: {},
            expressions: {
                [0]: FunctionArgument(
                    0,
                ),
                [1]: FunctionArgument(
                    1,
                ),
                [2]: Binary {
                    op: ShiftRight,
                    left: [0],
                    right: [1],
                },
                [3]: Literal(
                    U32(
                        64,
                    ),
                ),
                [4]: Binary {
                    op: Subtract,
                    left: [3],
                    right: [1],
                },
                [5]: Binary {
                    op: ShiftLeft,
                    left: [0],
                    right: [4],
                },
                [6]: Binary {
                    op: InclusiveOr,
                    left: [2],
                    right: [5],
                },
            },
            named_expressions: {
                [0]: "x",
                [1]: "n",
            },
            body: Block {
                body: [
                    Emit(
                        [2..3],
                    ),
                    Emit(
                        [4..7],
                    ),
                    Return {
                        value: Some(
                            [6],
                        ),
                    },
                ],
                span_info: [
                    Span {
                        start: 2237,
                        end: 2243,
                    },
                    Span {
                        start: 2236,
                        end: 2263,
                    },
                    Span {
                        start: 2229,
                        end: 2264,
                    },
                ],
            },
            diagnostic_filter_leaf: None,
        },
        [1]: Function {
            name: Some(
                "S0",
            ),
            arguments: [
                FunctionArgument {
                    name: Some(
                        "x",
                    ),
                    ty: [0],
                    binding: None,
                },
            ],
            result: Some(
                FunctionResult {
                    ty: [0],
                    binding: None,
                },
            ),
            local_variables: {},
            expressions: {
                [0]: FunctionArgument(
                    0,
                ),
                [1]: Literal(
                    U32(
                        28,
                    ),
                ),
                [2]: CallResult(
                    [0],
                ),
                [3]: Literal(
                    U32(
                        34,
                    ),
                ),
                [4]: CallResult(
                    [0],
                ),
                [5]: Binary {
                    op: ExclusiveOr,
                    left: [2],
                    right: [4],
                },
                [6]: Literal(
                    U32(
                        39,
                    ),
                ),
                [7]: CallResult(
                    [0],
                ),
                [8]: Binary {
                    op: ExclusiveOr,
                    left: [5],
                    right: [7],
                },
            },
            named_expressions: {
                [0]: "x",
            },
            body: Block {
                body: [
                    Call {
                        function: [0],
                        arguments: [
                            [0],
                            [1],
                        ],
                        result: Some(
                            [2],
                        ),
                    },
                    Call {
                        function: [0],
                        arguments: [
                            [0],
                            [3],
                        ],
                        result: Some(
                            [4],
                        ),
                    },
                    Emit(
                        [5..6],
                    ),
                    Call {
                        function: [0],
                        arguments: [
                            [0],
                            [6],
                        ],
                        result: Some(
                            [7],
                        ),
                    },
                    Emit(
                        [8..9],
                    ),
                    Return {
                        value: Some(
                            [8],
                        ),
                    },
                ],
                span_info: [
                    Span {
                        start: 2298,
                        end: 2309,
                    },
                    Span {
                        start: 2312,
                        end: 2323,
                    },
                    Span {
                        start: 2298,
                        end: 2323,
                    },
                    Span {
                        start: 2326,
                        end: 2337,
                    },
                    Span {
                        start: 2298,
                        end: 2337,
                    },
                    Span {
                        start: 2291,
                        end: 2338,
                    },
                ],
            },
            diagnostic_filter_leaf: None,
        },
        [2]: Function {
            name: Some(
                "S1",
            ),
            arguments: [
                FunctionArgument {
                    name: Some(
                        "x",
                    ),
                    ty: [0],
                    binding: None,
                },
            ],
            result: Some(
                FunctionResult {
                    ty: [0],
                    binding: None,
                },
            ),
            local_variables: {},
            expressions: {
                [0]: FunctionArgument(
                    0,
                ),
                [1]: Literal(
                    U32(
                        14,
                    ),
                ),
                [2]: CallResult(
                    [0],
                ),
                [3]: Literal(
                    U32(
                        18,
                    ),
                ),
                [4]: CallResult(
                    [0],
                ),
                [5]: Binary {
                    op: ExclusiveOr,
                    left: [2],
                    right: [4],
                },
                [6]: Literal(
                    U32(
                        41,
                    ),
                ),
                [7]: CallResult(
                    [0],
                ),
                [8]: Binary {
                    op: ExclusiveOr,
                    left: [5],
                    right: [7],
                },
            },
            named_expressions: {
                [0]: "x",
            },
            body: Block {
                body: [
                    Call {
                        function: [0],
                        arguments: [
                            [0],
                            [1],
                        ],
                        result: Some(
                            [2],
                        ),
                    },
                    Call {
                        function: [0],
                        arguments: [
                            [0],
                            [3],
                        ],
                        result: Some(
                            [4],
                        ),
                    },
                    Emit(
                        [5..6],
                    ),
                    Call {
                        function: [0],
                        arguments: [
                            [0],
                            [6],
                        ],
                        result: Some(
                            [7],
                        ),
                    },
                    Emit(
                        [8..9],
                    ),
                    Return {
                        value: Some(
                            [8],
                        ),
                    },
                ],
                span_info: [
                    Span {
                        start: 2371,
                        end: 2382,
                    },
                    Span {
                        start: 2385,
                        end: 2396,
                    },
                    Span {
                        start: 2371,
                        end: 2396,
                    },
                    Span {
                        start: 2399,
                        end: 2410,
                    },
                    Span {
                        start: 2371,
                        end: 2410,
                    },
                    Span {
                        start: 2364,
                        end: 2411,
                    },
                ],
            },
            diagnostic_filter_leaf: None,
        },
        [3]: Function {
            name: Some(
                "G0",
            ),
            arguments: [
                FunctionArgument {
                    name: Some(
                        "x",
                    ),
                    ty: [0],
                    binding: None,
                },
            ],
            result: Some(
                FunctionResult {
                    ty: [0],
                    binding: None,
                },
            ),
            local_variables: {},
            expressions: {
                [0]: FunctionArgument(
                    0,
                ),
                [1]: Literal(
                    U32(
                        1,
                    ),
                ),
                [2]: CallResult(
                    [0],
                ),
                [3]: Literal(
                    U32(
                        8,
                    ),
                ),
                [4]: CallResult(
                    [0],
                ),
                [5]: Binary {
                    op: ExclusiveOr,
                    left: [2],
                    right: [4],
                },
                [6]: Literal(
                    U32(
                        7,
                    ),
                ),
                [7]: Binary {
                    op: ShiftRight,
                    left: [0],
                    right: [6],
                },
                [8]: Binary {
                    op: ExclusiveOr,
                    left: [5],
                    right: [7],
                },
            },
            named_expressions: {
                [0]: "x",
            },
            body: Block {
                body: [
                    Call {
                        function: [0],
                        arguments: [
                            [0],
                            [1],
                        ],
                        result: Some(
                            [2],
                        ),
                    },
                    Call {
                        function: [0],
                        arguments: [
                            [0],
                            [3],
                        ],
                        result: Some(
                            [4],
                        ),
                    },
                    Emit(
                        [5..6],
                    ),
                    Emit(
                        [7..9],
                    ),
                    Return {
                        value: Some(
                            [8],
                        ),
                    },
                ],
                span_info: [
                    Span {
                        start: 2444,
                        end: 2454,
                    },
                    Span {
                        start: 2457,
                        end: 2467,
                    },
                    Span {
                        start: 2444,
                        end: 2467,
                    },
                    Span {
                        start: 2444,
                        end: 2479,
                    },
                    Span {
                        start: 2437,
                        end: 2480,
                    },
                ],
            },
            diagnostic_filter_leaf: None,
        },
        [4]: Function {
            name: Some(
                "G1",
            ),
            arguments: [
                FunctionArgument {
                    name: Some(
                        "x",
                    ),
                    ty: [0],
                    binding: None,
                },
            ],
            result: Some(
                FunctionResult {
                    ty: [0],
                    binding: None,
                },
            ),
            local_variables: {},
            expressions: {
                [0]: FunctionArgument(
                    0,
                ),
                [1]: Literal(
                    U32(
                        19,
                    ),
                ),
                [2]: CallResult(
                    [0],
                ),
                [3]: Literal(
                    U32(
                        61,
                    ),
                ),
                [4]: CallResult(
                    [0],
                ),
                [5]: Binary {
                    op: ExclusiveOr,
                    left: [2],
                    right: [4],
                },
                [6]: Literal(
                    U32(
                        6,
                    ),
                ),
                [7]: Binary {
                    op: ShiftRight,
                    left: [0],
                    right: [6],
                },
                [8]: Binary {
                    op: ExclusiveOr,
                    left: [5],
                    right: [7],
                },
            },
            named_expressions: {
                [0]: "x",
            },
            body: Block {
                body: [
                    Call {
                        function: [0],
                        arguments: [
                            [0],
                            [1],
                        ],
                        result: Some(
                            [2],
                        ),
                    },
                    Call {
                        function: [0],
                        arguments: [
                            [0],
                            [3],
                        ],
                        result: Some(
                            [4],
                        ),
                    },
                    Emit(
                        [5..6],
                    ),
                    Emit(
                        [7..9],
                    ),
                    Return {
                        value: Some(
                            [8],
                        ),
                    },
                ],
                span_info: [
                    Span {
                        start: 2513,
                        end: 2524,
                    },
                    Span {
                        start: 2527,
                        end: 2538,
                    },
                    Span {
                        start: 2513,
                        end: 2538,
                    },
                    Span {
                        start: 2513,
                        end: 2550,
                    },
                    Span {
                        start: 2506,
                        end: 2551,
                    },
                ],
            },
            diagnostic_filter_leaf: None,
        },
        [5]: Function {
            name: Some(
                "load_be64",
            ),
            arguments: [
                FunctionArgument {
                    name: Some(
                        "data",
                    ),
                    ty: [6],
                    binding: None,
                },
                FunctionArgument {
                    name: Some(
                        "offset",
                    ),
                    ty: [3],
                    binding: None,
                },
            ],
            result: Some(
                FunctionResult {
                    ty: [0],
                    binding: None,
                },
            ),
            local_variables: {},
            expressions: {
                [0]: FunctionArgument(
                    0,
                ),
                [1]: FunctionArgument(
                    1,
                ),
                [2]: Literal(
                    U32(
                        8,
                    ),
                ),
                [3]: Binary {
                    op: Multiply,
                    left: [1],
                    right: [2],
                },
                [4]: Access {
                    base: [0],
                    index: [3],
                },
                [5]: Load {
                    pointer: [4],
                },
                [6]: As {
                    expr: [5],
                    kind: Uint,
                    convert: Some(
                        8,
                    ),
                },
                [7]: Literal(
                    U32(
                        56,
                    ),
                ),
                [8]: Binary {
                    op: ShiftLeft,
                    left: [6],
                    right: [7],
                },
                [9]: Literal(
                    U32(
                        1,
                    ),
                ),
                [10]: Binary {
                    op: Add,
                    left: [3],
                    right: [9],
                },
                [11]: Access {
                    base: [0],
                    index: [10],
                },
                [12]: Load {
                    pointer: [11],
                },
                [13]: As {
                    expr: [12],
                    kind: Uint,
                    convert: Some(
                        8,
                    ),
                },
                [14]: Literal(
                    U32(
                        48,
                    ),
                ),
                [15]: Binary {
                    op: ShiftLeft,
                    left: [13],
                    right: [14],
                },
                [16]: Binary {
                    op: InclusiveOr,
                    left: [8],
                    right: [15],
                },
                [17]: Literal(
                    U32(
                        2,
                    ),
                ),
                [18]: Binary {
                    op: Add,
                    left: [3],
                    right: [17],
                },
                [19]: Access {
                    base: [0],
                    index: [18],
                },
                [20]: Load {
                    pointer: [19],
                },
                [21]: As {
                    expr: [20],
                    kind: Uint,
                    convert: Some(
                        8,
                    ),
                },
                [22]: Literal(
                    U32(
                        40,
                    ),
                ),
                [23]: Binary {
                    op: ShiftLeft,
                    left: [21],
                    right: [22],
                },
                [24]: Binary {
                    op: InclusiveOr,
                    left: [16],
                    right: [23],
                },
                [25]: Literal(
                    U32(
                        3,
                    ),
                ),
                [26]: Binary {
                    op: Add,
                    left: [3],
                    right: [25],
                },
                [27]: Access {
                    base: [0],
                    index: [26],
                },
                [28]: Load {
                    pointer: [27],
                },
                [29]: As {
                    expr: [28],
                    kind: Uint,
                    convert: Some(
                        8,
                    ),
                },
                [30]: Literal(
                    U32(
                        32,
                    ),
                ),
                [31]: Binary {
                    op: ShiftLeft,
                    left: [29],
                    right: [30],
                },
                [32]: Binary {
                    op: InclusiveOr,
                    left: [24],
                    right: [31],
                },
                [33]: Literal(
                    U32(
                        4,
                    ),
                ),
                [34]: Binary {
                    op: Add,
                    left: [3],
                    right: [33],
                },
                [35]: Access {
                    base: [0],
                    index: [34],
                },
                [36]: Load {
                    pointer: [35],
                },
                [37]: As {
                    expr: [36],
                    kind: Uint,
                    convert: Some(
                        8,
                    ),
                },
                [38]: Literal(
                    U32(
                        24,
                    ),
                ),
                [39]: Binary {
                    op: ShiftLeft,
                    left: [37],
                    right: [38],
                },
                [40]: Binary {
                    op: InclusiveOr,
                    left: [32],
                    right: [39],
                },
                [41]: Literal(
                    U32(
                        5,
                    ),
                ),
                [42]: Binary {
                    op: Add,
                    left: [3],
                    right: [41],
                },
                [43]: Access {
                    base: [0],
                    index: [42],
                },
                [44]: Load {
                    pointer: [43],
                },
                [45]: As {
                    expr: [44],
                    kind: Uint,
                    convert: Some(
                        8,
                    ),
                },
                [46]: Literal(
                    U32(
                        16,
                    ),
                ),
                [47]: Binary {
                    op: ShiftLeft,
                    left: [45],
                    right: [46],
                },
                [48]: Binary {
                    op: InclusiveOr,
                    left: [40],
                    right: [47],
                },
                [49]: Literal(
                    U32(
                        6,
                    ),
                ),
                [50]: Binary {
                    op: Add,
                    left: [3],
                    right: [49],
                },
                [51]: Access {
                    base: [0],
                    index: [50],
                },
                [52]: Load {
                    pointer: [51],
                },
                [53]: As {
                    expr: [52],
                    kind: Uint,
                    convert: Some(
                        8,
                    ),
                },
                [54]: Literal(
                    U32(
                        8,
                    ),
                ),
                [55]: Binary {
                    op: ShiftLeft,
                    left: [53],
                    right: [54],
                },
                [56]: Binary {
                    op: InclusiveOr,
                    left: [48],
                    right: [55],
                },
                [57]: Literal(
                    U32(
                        7,
                    ),
                ),
                [58]: Binary {
                    op: Add,
                    left: [3],
                    right: [57],
                },
                [59]: Access {
                    base: [0],
                    index: [58],
                },
                [60]: Load {
                    pointer: [59],
                },
                [61]: As {
                    expr: [60],
                    kind: Uint,
                    convert: Some(
                        8,
                    ),
                },
                [62]: Binary {
                    op: InclusiveOr,
                    left: [56],
                    right: [61],
                },
            },
            named_expressions: {
                [0]: "data",
                [1]: "offset",
                [3]: "base",
            },
            body: Block {
                body: [
                    Emit(
                        [3..4],
                    ),
                    Emit(
                        [4..7],
                    ),
                    Emit(
                        [8..9],
                    ),
                    Emit(
                        [10..14],
                    ),
                    Emit(
                        [15..17],
                    ),
                    Emit(
                        [18..22],
                    ),
                    Emit(
                        [23..25],
                    ),
                    Emit(
                        [26..30],
                    ),
                    Emit(
                        [31..33],
                    ),
                    Emit(
                        [34..38],
                    ),
                    Emit(
                        [39..41],
                    ),
                    Emit(
                        [42..46],
                    ),
                    Emit(
                        [47..49],
                    ),
                    Emit(
                        [50..54],
                    ),
                    Emit(
                        [55..57],
                    ),
                    Emit(
                        [58..63],
                    ),
                    Return {
                        value: Some(
                            [62],
                        ),
                    },
                ],
                span_info: [
                    Span {
                        start: 2657,
                        end: 2668,
                    },
                    Span {
                        start: 2682,
                        end: 2700,
                    },
                    Span {
                        start: 2682,
                        end: 2707,
                    },
                    Span {
                        start: 2712,
                        end: 2735,
                    },
                    Span {
                        start: 2681,
                        end: 2743,
                    },
                    Span {
                        start: 2747,
                        end: 2770,
                    },
                    Span {
                        start: 2681,
                        end: 2778,
                    },
                    Span {
                        start: 2782,
                        end: 2805,
                    },
                    Span {
                        start: 2681,
                        end: 2813,
                    },
                    Span {
                        start: 2817,
                        end: 2840,
                    },
                    Span {
                        start: 2681,
                        end: 2848,
                    },
                    Span {
                        start: 2852,
                        end: 2875,
                    },
                    Span {
                        start: 2681,
                        end: 2883,
                    },
                    Span {
                        start: 2887,
                        end: 2910,
                    },
                    Span {
                        start: 2681,
                        end: 2917,
                    },
                    Span {
                        start: 2681,
                        end: 2943,
                    },
                    Span {
                        start: 2674,
                        end: 2944,
                    },
                ],
            },
            diagnostic_filter_leaf: None,
        },
        [6]: Function {
            name: Some(
                "store_be64",
            ),
            arguments: [
                FunctionArgument {
                    name: Some(
                        "data",
                    ),
                    ty: [6],
                    binding: None,
                },
                FunctionArgument {
                    name: Some(
                        "x",
                    ),
                    ty: [0],
                    binding: None,
                },
                FunctionArgument {
                    name: Some(
                        "offset",
                    ),
                    ty: [3],
                    binding: None,
                },
            ],
            result: None,
            local_variables: {},
            expressions: {
                [0]: FunctionArgument(
                    0,
                ),
                [1]: FunctionArgument(
                    1,
                ),
                [2]: FunctionArgument(
                    2,
                ),
                [3]: Access {
                    base: [0],
                    index: [2],
                },
                [4]: Literal(
                    U32(
                        56,
                    ),
                ),
                [5]: Binary {
                    op: ShiftRight,
                    left: [1],
                    right: [4],
                },
                [6]: Literal(
                    U64(
                        255,
                    ),
                ),
                [7]: Binary {
                    op: And,
                    left: [5],
                    right: [6],
                },
                [8]: As {
                    expr: [7],
                    kind: Uint,
                    convert: Some(
                        4,
                    ),
                },
                [9]: Literal(
                    U32(
                        1,
                    ),
                ),
                [10]: Binary {
                    op: Add,
                    left: [2],
                    right: [9],
                },
                [11]: Access {
                    base: [0],
                    index: [10],
                },
                [12]: Literal(
                    U32(
                        48,
                    ),
                ),
                [13]: Binary {
                    op: ShiftRight,
                    left: [1],
                    right: [12],
                },
                [14]: Literal(
                    U64(
                        255,
                    ),
                ),
                [15]: Binary {
                    op: And,
                    left: [13],
                    right: [14],
                },
                [16]: As {
                    expr: [15],
                    kind: Uint,
                    convert: Some(
                        4,
                    ),
                },
                [17]: Literal(
                    U32(
                        2,
                    ),
                ),
                [18]: Binary {
                    op: Add,
                    left: [2],
                    right: [17],
                },
                [19]: Access {
                    base: [0],
                    index: [18],
                },
                [20]: Literal(
                    U32(
                        40,
                    ),
                ),
                [21]: Binary {
                    op: ShiftRight,
                    left: [1],
                    right: [20],
                },
                [22]: Literal(
                    U64(
                        255,
                    ),
                ),
                [23]: Binary {
                    op: And,
                    left: [21],
                    right: [22],
                },
                [24]: As {
                    expr: [23],
                    kind: Uint,
                    convert: Some(
                        4,
                    ),
                },
                [25]: Literal(
                    U32(
                        3,
                    ),
                ),
                [26]: Binary {
                    op: Add,
                    left: [2],
                    right: [25],
                },
                [27]: Access {
                    base: [0],
                    index: [26],
                },
                [28]: Literal(
                    U32(
                        32,
                    ),
                ),
                [29]: Binary {
                    op: ShiftRight,
                    left: [1],
                    right: [28],
                },
                [30]: Literal(
                    U64(
                        255,
                    ),
                ),
                [31]: Binary {
                    op: And,
                    left: [29],
                    right: [30],
                },
                [32]: As {
                    expr: [31],
                    kind: Uint,
                    convert: Some(
                        4,
                    ),
                },
                [33]: Literal(
                    U32(
                        4,
                    ),
                ),
                [34]: Binary {
                    op: Add,
                    left: [2],
                    right: [33],
                },
                [35]: Access {
                    base: [0],
                    index: [34],
                },
                [36]: Literal(
                    U32(
                        24,
                    ),
                ),
                [37]: Binary {
                    op: ShiftRight,
                    left: [1],
                    right: [36],
                },
                [38]: Literal(
                    U64(
                        255,
                    ),
                ),
                [39]: Binary {
                    op: And,
                    left: [37],
                    right: [38],
                },
                [40]: As {
                    expr: [39],
                    kind: Uint,
                    convert: Some(
                        4,
                    ),
                },
                [41]: Literal(
                    U32(
                        5,
                    ),
                ),
                [42]: Binary {
                    op: Add,
                    left: [2],
                    right: [41],
                },
                [43]: Access {
                    base: [0],
                    index: [42],
                },
                [44]: Literal(
                    U32(
                        16,
                    ),
                ),
                [45]: Binary {
                    op: ShiftRight,
                    left: [1],
                    right: [44],
                },
                [46]: Literal(
                    U64(
                        255,
                    ),
                ),
                [47]: Binary {
                    op: And,
                    left: [45],
                    right: [46],
                },
                [48]: As {
                    expr: [47],
                    kind: Uint,
                    convert: Some(
                        4,
                    ),
                },
                [49]: Literal(
                    U32(
                        6,
                    ),
                ),
                [50]: Binary {
                    op: Add,
                    left: [2],
                    right: [49],
                },
                [51]: Access {
                    base: [0],
                    index: [50],
                },
                [52]: Literal(
                    U32(
                        8,
                    ),
                ),
                [53]: Binary {
                    op: ShiftRight,
                    left: [1],
                    right: [52],
                },
                [54]: Literal(
                    U64(
                        255,
                    ),
                ),
                [55]: Binary {
                    op: And,
                    left: [53],
                    right: [54],
                },
                [56]: As {
                    expr: [55],
                    kind: Uint,
                    convert: Some(
                        4,
                    ),
                },
                [57]: Literal(
                    U32(
                        7,
                    ),
                ),
                [58]: Binary {
                    op: Add,
                    left: [2],
                    right: [57],
                },
                [59]: Access {
                    base: [0],
                    index: [58],
                },
                [60]: Literal(
                    U64(
                        255,
                    ),
                ),
                [61]: Binary {
                    op: And,
                    left: [1],
                    right: [60],
                },
                [62]: As {
                    expr: [61],
                    kind: Uint,
                    convert: Some(
                        4,
                    ),
                },
            },
            named_expressions: {
                [0]: "data",
                [1]: "x",
                [2]: "base",
            },
            body: Block {
                body: [
                    Emit(
                        [3..4],
                    ),
                    Emit(
                        [5..6],
                    ),
                    Emit(
                        [7..9],
                    ),
                    Store {
                        pointer: [3],
                        value: [8],
                    },
                    Emit(
                        [10..12],
                    ),
                    Emit(
                        [13..14],
                    ),
                    Emit(
                        [15..17],
                    ),
                    Store {
                        pointer: [11],
                        value: [16],
                    },
                    Emit(
                        [18..20],
                    ),
                    Emit(
                        [21..22],
                    ),
                    Emit(
                        [23..25],
                    ),
                    Store {
                        pointer: [19],
                        value: [24],
                    },
                    Emit(
                        [26..28],
                    ),
                    Emit(
                        [29..30],
                    ),
                    Emit(
                        [31..33],
                    ),
                    Store {
                        pointer: [27],
                        value: [32],
                    },
                    Emit(
                        [34..36],
                    ),
                    Emit(
                        [37..38],
                    ),
                    Emit(
                        [39..41],
                    ),
                    Store {
                        pointer: [35],
                        value: [40],
                    },
                    Emit(
                        [42..44],
                    ),
                    Emit(
                        [45..46],
                    ),
                    Emit(
                        [47..49],
                    ),
                    Store {
                        pointer: [43],
                        value: [48],
                    },
                    Emit(
                        [50..52],
                    ),
                    Emit(
                        [53..54],
                    ),
                    Emit(
                        [55..57],
                    ),
                    Store {
                        pointer: [51],
                        value: [56],
                    },
                    Emit(
                        [58..60],
                    ),
                    Emit(
                        [61..63],
                    ),
                    Store {
                        pointer: [59],
                        value: [62],
                    },
                    Return {
                        value: None,
                    },
                ],
                span_info: [
                    Span {
                        start: 3064,
                        end: 3077,
                    },
                    Span {
                        start: 3085,
                        end: 3093,
                    },
                    Span {
                        start: 3080,
                        end: 3104,
                    },
                    Span {
                        start: 3064,
                        end: 3104,
                    },
                    Span {
                        start: 3110,
                        end: 3128,
                    },
                    Span {
                        start: 3136,
                        end: 3144,
                    },
                    Span {
                        start: 3131,
                        end: 3155,
                    },
                    Span {
                        start: 3110,
                        end: 3155,
                    },
                    Span {
                        start: 3161,
                        end: 3179,
                    },
                    Span {
                        start: 3187,
                        end: 3195,
                    },
                    Span {
                        start: 3182,
                        end: 3206,
                    },
                    Span {
                        start: 3161,
                        end: 3206,
                    },
                    Span {
                        start: 3212,
                        end: 3230,
                    },
                    Span {
                        start: 3238,
                        end: 3246,
                    },
                    Span {
                        start: 3233,
                        end: 3257,
                    },
                    Span {
                        start: 3212,
                        end: 3257,
                    },
                    Span {
                        start: 3263,
                        end: 3281,
                    },
                    Span {
                        start: 3289,
                        end: 3297,
                    },
                    Span {
                        start: 3284,
                        end: 3308,
                    },
                    Span {
                        start: 3263,
                        end: 3308,
                    },
                    Span {
                        start: 3314,
                        end: 3332,
                    },
                    Span {
                        start: 3340,
                        end: 3348,
                    },
                    Span {
                        start: 3335,
                        end: 3359,
                    },
                    Span {
                        start: 3314,
                        end: 3359,
                    },
                    Span {
                        start: 3365,
                        end: 3383,
                    },
                    Span {
                        start: 3391,
                        end: 3398,
                    },
                    Span {
                        start: 3386,
                        end: 3409,
                    },
                    Span {
                        start: 3365,
                        end: 3409,
                    },
                    Span {
                        start: 3415,
                        end: 3433,
                    },
                    Span {
                        start: 3436,
                        end: 3451,
                    },
                    Span {
                        start: 3415,
                        end: 3451,
                    },
                    Span {
                        start: 0,
                        end: 0,
                    },
                ],
            },
            diagnostic_filter_leaf: None,
        },
        [7]: Function {
            name: Some(
                "store_be64_out",
            ),
            arguments: [
                FunctionArgument {
                    name: Some(
                        "data",
                    ),
                    ty: [8],
                    binding: None,
                },
                FunctionArgument {
                    name: Some(
                        "x",
                    ),
                    ty: [0],
                    binding: None,
                },
                FunctionArgument {
                    name: Some(
                        "offset",
                    ),
                    ty: [3],
                    binding: None,
                },
            ],
            result: None,
            local_variables: {},
            expressions: {
                [0]: FunctionArgument(
                    0,
                ),
                [1]: FunctionArgument(
                    1,
                ),
                [2]: FunctionArgument(
                    2,
                ),
                [3]: Access {
                    base: [0],
                    index: [2],
                },
                [4]: Literal(
                    U32(
                        56,
                    ),
                ),
                [5]: Binary {
                    op: ShiftRight,
                    left: [1],
                    right: [4],
                },
                [6]: Literal(
                    U64(
                        255,
                    ),
                ),
                [7]: Binary {
                    op: And,
                    left: [5],
                    right: [6],
                },
                [8]: As {
                    expr: [7],
                    kind: Uint,
                    convert: Some(
                        4,
                    ),
                },
                [9]: Literal(
                    U32(
                        1,
                    ),
                ),
                [10]: Binary {
                    op: Add,
                    left: [2],
                    right: [9],
                },
                [11]: Access {
                    base: [0],
                    index: [10],
                },
                [12]: Literal(
                    U32(
                        48,
                    ),
                ),
                [13]: Binary {
                    op: ShiftRight,
                    left: [1],
                    right: [12],
                },
                [14]: Literal(
                    U64(
                        255,
                    ),
                ),
                [15]: Binary {
                    op: And,
                    left: [13],
                    right: [14],
                },
                [16]: As {
                    expr: [15],
                    kind: Uint,
                    convert: Some(
                        4,
                    ),
                },
                [17]: Literal(
                    U32(
                        2,
                    ),
                ),
                [18]: Binary {
                    op: Add,
                    left: [2],
                    right: [17],
                },
                [19]: Access {
                    base: [0],
                    index: [18],
                },
                [20]: Literal(
                    U32(
                        40,
                    ),
                ),
                [21]: Binary {
                    op: ShiftRight,
                    left: [1],
                    right: [20],
                },
                [22]: Literal(
                    U64(
                        255,
                    ),
                ),
                [23]: Binary {
                    op: And,
                    left: [21],
                    right: [22],
                },
                [24]: As {
                    expr: [23],
                    kind: Uint,
                    convert: Some(
                        4,
                    ),
                },
                [25]: Literal(
                    U32(
                        3,
                    ),
                ),
                [26]: Binary {
                    op: Add,
                    left: [2],
                    right: [25],
                },
                [27]: Access {
                    base: [0],
                    index: [26],
                },
                [28]: Literal(
                    U32(
                        32,
                    ),
                ),
                [29]: Binary {
                    op: ShiftRight,
                    left: [1],
                    right: [28],
                },
                [30]: Literal(
                    U64(
                        255,
                    ),
                ),
                [31]: Binary {
                    op: And,
                    left: [29],
                    right: [30],
                },
                [32]: As {
                    expr: [31],
                    kind: Uint,
                    convert: Some(
                        4,
                    ),
                },
                [33]: Literal(
                    U32(
                        4,
                    ),
                ),
                [34]: Binary {
                    op: Add,
                    left: [2],
                    right: [33],
                },
                [35]: Access {
                    base: [0],
                    index: [34],
                },
                [36]: Literal(
                    U32(
                        24,
                    ),
                ),
                [37]: Binary {
                    op: ShiftRight,
                    left: [1],
                    right: [36],
                },
                [38]: Literal(
                    U64(
                        255,
                    ),
                ),
                [39]: Binary {
                    op: And,
                    left: [37],
                    right: [38],
                },
                [40]: As {
                    expr: [39],
                    kind: Uint,
                    convert: Some(
                        4,
                    ),
                },
                [41]: Literal(
                    U32(
                        5,
                    ),
                ),
                [42]: Binary {
                    op: Add,
                    left: [2],
                    right: [41],
                },
                [43]: Access {
                    base: [0],
                    index: [42],
                },
                [44]: Literal(
                    U32(
                        16,
                    ),
                ),
                [45]: Binary {
                    op: ShiftRight,
                    left: [1],
                    right: [44],
                },
                [46]: Literal(
                    U64(
                        255,
                    ),
                ),
                [47]: Binary {
                    op: And,
                    left: [45],
                    right: [46],
                },
                [48]: As {
                    expr: [47],
                    kind: Uint,
                    convert: Some(
                        4,
                    ),
                },
                [49]: Literal(
                    U32(
                        6,
                    ),
                ),
                [50]: Binary {
                    op: Add,
                    left: [2],
                    right: [49],
                },
                [51]: Access {
                    base: [0],
                    index: [50],
                },
                [52]: Literal(
                    U32(
                        8,
                    ),
                ),
                [53]: Binary {
                    op: ShiftRight,
                    left: [1],
                    right: [52],
                },
                [54]: Literal(
                    U64(
                        255,
                    ),
                ),
                [55]: Binary {
                    op: And,
                    left: [53],
                    right: [54],
                },
                [56]: As {
                    expr: [55],
                    kind: Uint,
                    convert: Some(
                        4,
                    ),
                },
                [57]: Literal(
                    U32(
                        7,
                    ),
                ),
                [58]: Binary {
                    op: Add,
                    left: [2],
                    right: [57],
                },
                [59]: Access {
                    base: [0],
                    index: [58],
                },
                [60]: Literal(
                    U64(
                        255,
                    ),
                ),
                [61]: Binary {
                    op: And,
                    left: [1],
                    right: [60],
                },
                [62]: As {
                    expr: [61],
                    kind: Uint,
                    convert: Some(
                        4,
                    ),
                },
            },
            named_expressions: {
                [0]: "data",
                [1]: "x",
                [2]: "base",
            },
            body: Block {
                body: [
                    Emit(
                        [3..4],
                    ),
                    Emit(
                        [5..6],
                    ),
                    Emit(
                        [7..9],
                    ),
                    Store {
                        pointer: [3],
                        value: [8],
                    },
                    Emit(
                        [10..12],
                    ),
                    Emit(
                        [13..14],
                    ),
                    Emit(
                        [15..17],
                    ),
                    Store {
                        pointer: [11],
                        value: [16],
                    },
                    Emit(
                        [18..20],
                    ),
                    Emit(
                        [21..22],
                    ),
                    Emit(
                        [23..25],
                    ),
                    Store {
                        pointer: [19],
                        value: [24],
                    },
                    Emit(
                        [26..28],
                    ),
                    Emit(
                        [29..30],
                    ),
                    Emit(
                        [31..33],
                    ),
                    Store {
                        pointer: [27],
                        value: [32],
                    },
                    Emit(
                        [34..36],
                    ),
                    Emit(
                        [37..38],
                    ),
                    Emit(
                        [39..41],
                    ),
                    Store {
                        pointer: [35],
                        value: [40],
                    },
                    Emit(
                        [42..44],
                    ),
                    Emit(
                        [45..46],
                    ),
                    Emit(
                        [47..49],
                    ),
                    Store {
                        pointer: [43],
                        value: [48],
                    },
                    Emit(
                        [50..52],
                    ),
                    Emit(
                        [53..54],
                    ),
                    Emit(
                        [55..57],
                    ),
                    Store {
                        pointer: [51],
                        value: [56],
                    },
                    Emit(
                        [58..60],
                    ),
                    Emit(
                        [61..63],
                    ),
                    Store {
                        pointer: [59],
                        value: [62],
                    },
                    Return {
                        value: None,
                    },
                ],
                span_info: [
                    Span {
                        start: 3577,
                        end: 3590,
                    },
                    Span {
                        start: 3598,
                        end: 3606,
                    },
                    Span {
                        start: 3593,
                        end: 3617,
                    },
                    Span {
                        start: 3577,
                        end: 3617,
                    },
                    Span {
                        start: 3623,
                        end: 3641,
                    },
                    Span {
                        start: 3649,
                        end: 3657,
                    },
                    Span {
                        start: 3644,
                        end: 3668,
                    },
                    Span {
                        start: 3623,
                        end: 3668,
                    },
                    Span {
                        start: 3674,
                        end: 3692,
                    },
                    Span {
                        start: 3700,
                        end: 3708,
                    },
                    Span {
                        start: 3695,
                        end: 3719,
                    },
                    Span {
                        start: 3674,
                        end: 3719,
                    },
                    Span {
                        start: 3725,
                        end: 3743,
                    },
                    Span {
                        start: 3751,
                        end: 3759,
                    },
                    Span {
                        start: 3746,
                        end: 3770,
                    },
                    Span {
                        start: 3725,
                        end: 3770,
                    },
                    Span {
                        start: 3776,
                        end: 3794,
                    },
                    Span {
                        start: 3802,
                        end: 3810,
                    },
                    Span {
                        start: 3797,
                        end: 3821,
                    },
                    Span {
                        start: 3776,
                        end: 3821,
                    },
                    Span {
                        start: 3827,
                        end: 3845,
                    },
                    Span {
                        start: 3853,
                        end: 3861,
                    },
                    Span {
                        start: 3848,
                        end: 3872,
                    },
                    Span {
                        start: 3827,
                        end: 3872,
                    },
                    Span {
                        start: 3878,
                        end: 3896,
                    },
                    Span {
                        start: 3904,
                        end: 3911,
                    },
                    Span {
                        start: 3899,
                        end: 3922,
                    },
                    Span {
                        start: 3878,
                        end: 3922,
                    },
                    Span {
                        start: 3928,
                        end: 3946,
                    },
                    Span {
                        start: 3949,
                        end: 3964,
                    },
                    Span {
                        start: 3928,
                        end: 3964,
                    },
                    Span {
                        start: 0,
                        end: 0,
                    },
                ],
            },
            diagnostic_filter_leaf: None,
        },
        [8]: Function {
            name: Some(
                "compress",
            ),
            arguments: [
                FunctionArgument {
                    name: Some(
                        "state",
                    ),
                    ty: [9],
                    binding: None,
                },
                FunctionArgument {
                    name: Some(
                        "buf",
                    ),
                    ty: [6],
                    binding: None,
                },
            ],
            result: None,
            local_variables: {
                [0]: LocalVariable {
                    name: Some(
                        "W",
                    ),
                    ty: [1],
                    init: None,
                },
                [1]: LocalVariable {
                    name: Some(
                        "i",
                    ),
                    ty: [3],
                    init: Some(
                        [3],
                    ),
                },
                [2]: LocalVariable {
                    name: Some(
                        "i",
                    ),
                    ty: [3],
                    init: Some(
                        [15],
                    ),
                },
                [3]: LocalVariable {
                    name: Some(
                        "a",
                    ),
                    ty: [0],
                    init: None,
                },
                [4]: LocalVariable {
                    name: Some(
                        "b",
                    ),
                    ty: [0],
                    init: None,
                },
                [5]: LocalVariable {
                    name: Some(
                        "c",
                    ),
                    ty: [0],
                    init: None,
                },
                [6]: LocalVariable {
                    name: Some(
                        "d",
                    ),
                    ty: [0],
                    init: None,
                },
                [7]: LocalVariable {
                    name: Some(
                        "e",
                    ),
                    ty: [0],
                    init: None,
                },
                [8]: LocalVariable {
                    name: Some(
                        "f",
                    ),
                    ty: [0],
                    init: None,
                },
                [9]: LocalVariable {
                    name: Some(
                        "g",
                    ),
                    ty: [0],
                    init: None,
                },
                [10]: LocalVariable {
                    name: Some(
                        "h",
                    ),
                    ty: [0],
                    init: None,
                },
                [11]: LocalVariable {
                    name: Some(
                        "i",
                    ),
                    ty: [3],
                    init: Some(
                        [74],
                    ),
                },
            },
            expressions: {
                [0]: FunctionArgument(
                    0,
                ),
                [1]: FunctionArgument(
                    1,
                ),
                [2]: LocalVariable(
                    [0],
                ),
                [3]: Literal(
                    U32(
                        0,
                    ),
                ),
                [4]: LocalVariable(
                    [1],
                ),
                [5]: Load {
                    pointer: [4],
                },
                [6]: Literal(
                    U32(
                        16,
                    ),
                ),
                [7]: Binary {
                    op: Less,
                    left: [5],
                    right: [6],
                },
                [8]: Load {
                    pointer: [4],
                },
                [9]: Access {
                    base: [2],
                    index: [8],
                },
                [10]: Load {
                    pointer: [4],
                },
                [11]: CallResult(
                    [5],
                ),
                [12]: Literal(
                    U32(
                        1,
                    ),
                ),
                [13]: Load {
                    pointer: [4],
                },
                [14]: Binary {
                    op: Add,
                    left: [13],
                    right: [12],
                },
                [15]: Literal(
                    U32(
                        16,
                    ),
                ),
                [16]: LocalVariable(
                    [2],
                ),
                [17]: Load {
                    pointer: [16],
                },
                [18]: Literal(
                    U32(
                        80,
                    ),
                ),
                [19]: Binary {
                    op: Less,
                    left: [17],
                    right: [18],
                },
                [20]: Load {
                    pointer: [16],
                },
                [21]: Access {
                    base: [2],
                    index: [20],
                },
                [22]: Load {
                    pointer: [16],
                },
                [23]: Literal(
                    U32(
                        16,
                    ),
                ),
                [24]: Binary {
                    op: Subtract,
                    left: [22],
                    right: [23],
                },
                [25]: Access {
                    base: [2],
                    index: [24],
                },
                [26]: Load {
                    pointer: [25],
                },
                [27]: Load {
                    pointer: [16],
                },
                [28]: Literal(
                    U32(
                        15,
                    ),
                ),
                [29]: Binary {
                    op: Subtract,
                    left: [27],
                    right: [28],
                },
                [30]: Access {
                    base: [2],
                    index: [29],
                },
                [31]: Load {
                    pointer: [30],
                },
                [32]: CallResult(
                    [3],
                ),
                [33]: Binary {
                    op: Add,
                    left: [26],
                    right: [32],
                },
                [34]: Load {
                    pointer: [16],
                },
                [35]: Literal(
                    U32(
                        7,
                    ),
                ),
                [36]: Binary {
                    op: Subtract,
                    left: [34],
                    right: [35],
                },
                [37]: Access {
                    base: [2],
                    index: [36],
                },
                [38]: Load {
                    pointer: [37],
                },
                [39]: Binary {
                    op: Add,
                    left: [33],
                    right: [38],
                },
                [40]: Load {
                    pointer: [16],
                },
                [41]: Literal(
                    U32(
                        2,
                    ),
                ),
                [42]: Binary {
                    op: Subtract,
                    left: [40],
                    right: [41],
                },
                [43]: Access {
                    base: [2],
                    index: [42],
                },
                [44]: Load {
                    pointer: [43],
                },
                [45]: CallResult(
                    [4],
                ),
                [46]: Binary {
                    op: Add,
                    left: [39],
                    right: [45],
                },
                [47]: Literal(
                    U32(
                        1,
                    ),
                ),
                [48]: Load {
                    pointer: [16],
                },
                [49]: Binary {
                    op: Add,
                    left: [48],
                    right: [47],
                },
                [50]: AccessIndex {
                    base: [0],
                    index: 0,
                },
                [51]: Load {
                    pointer: [50],
                },
                [52]: LocalVariable(
                    [3],
                ),
                [53]: AccessIndex {
                    base: [0],
                    index: 1,
                },
                [54]: Load {
                    pointer: [53],
                },
                [55]: LocalVariable(
                    [4],
                ),
                [56]: AccessIndex {
                    base: [0],
                    index: 2,
                },
                [57]: Load {
                    pointer: [56],
                },
                [58]: LocalVariable(
                    [5],
                ),
                [59]: AccessIndex {
                    base: [0],
                    index: 3,
                },
                [60]: Load {
                    pointer: [59],
                },
                [61]: LocalVariable(
                    [6],
                ),
                [62]: AccessIndex {
                    base: [0],
                    index: 4,
                },
                [63]: Load {
                    pointer: [62],
                },
                [64]: LocalVariable(
                    [7],
                ),
                [65]: AccessIndex {
                    base: [0],
                    index: 5,
                },
                [66]: Load {
                    pointer: [65],
                },
                [67]: LocalVariable(
                    [8],
                ),
                [68]: AccessIndex {
                    base: [0],
                    index: 6,
                },
                [69]: Load {
                    pointer: [68],
                },
                [70]: LocalVariable(
                    [9],
                ),
                [71]: AccessIndex {
                    base: [0],
                    index: 7,
                },
                [72]: Load {
                    pointer: [71],
                },
                [73]: LocalVariable(
                    [10],
                ),
                [74]: Literal(
                    U32(
                        0,
                    ),
                ),
                [75]: LocalVariable(
                    [11],
                ),
                [76]: Load {
                    pointer: [75],
                },
                [77]: Literal(
                    U32(
                        80,
                    ),
                ),
                [78]: Binary {
                    op: Less,
                    left: [76],
                    right: [77],
                },
                [79]: Load {
                    pointer: [73],
                },
                [80]: Load {
                    pointer: [64],
                },
                [81]: CallResult(
                    [2],
                ),
                [82]: Binary {
                    op: Add,
                    left: [79],
                    right: [81],
                },
                [83]: Load {
                    pointer: [64],
                },
                [84]: Load {
                    pointer: [67],
                },
                [85]: Binary {
                    op: And,
                    left: [83],
                    right: [84],
                },
                [86]: Load {
                    pointer: [64],
                },
                [87]: Unary {
                    op: BitwiseNot,
                    expr: [86],
                },
                [88]: Load {
                    pointer: [70],
                },
                [89]: Binary {
                    op: And,
                    left: [87],
                    right: [88],
                },
                [90]: Binary {
                    op: ExclusiveOr,
                    left: [85],
                    right: [89],
                },
                [91]: Binary {
                    op: Add,
                    left: [82],
                    right: [90],
                },
                [92]: Constant(
                    [0],
                ),
                [93]: Load {
                    pointer: [75],
                },
                [94]: Access {
                    base: [92],
                    index: [93],
                },
                [95]: Binary {
                    op: Add,
                    left: [91],
                    right: [94],
                },
                [96]: Load {
                    pointer: [75],
                },
                [97]: Access {
                    base: [2],
                    index: [96],
                },
                [98]: Load {
                    pointer: [97],
                },
                [99]: Binary {
                    op: Add,
                    left: [95],
                    right: [98],
                },
                [100]: Load {
                    pointer: [52],
                },
                [101]: CallResult(
                    [1],
                ),
                [102]: Load {
                    pointer: [52],
                },
                [103]: Load {
                    pointer: [55],
                },
                [104]: Binary {
                    op: And,
                    left: [102],
                    right: [103],
                },
                [105]: Load {
                    pointer: [52],
                },
                [106]: Load {
                    pointer: [58],
                },
                [107]: Binary {
                    op: And,
                    left: [105],
                    right: [106],
                },
                [108]: Binary {
                    op: ExclusiveOr,
                    left: [104],
                    right: [107],
                },
                [109]: Load {
                    pointer: [55],
                },
                [110]: Load {
                    pointer: [58],
                },
                [111]: Binary {
                    op: And,
                    left: [109],
                    right: [110],
                },
                [112]: Binary {
                    op: ExclusiveOr,
                    left: [108],
                    right: [111],
                },
                [113]: Binary {
                    op: Add,
                    left: [101],
                    right: [112],
                },
                [114]: Load {
                    pointer: [70],
                },
                [115]: Load {
                    pointer: [67],
                },
                [116]: Load {
                    pointer: [64],
                },
                [117]: Load {
                    pointer: [61],
                },
                [118]: Binary {
                    op: Add,
                    left: [117],
                    right: [99],
                },
                [119]: Load {
                    pointer: [58],
                },
                [120]: Load {
                    pointer: [55],
                },
                [121]: Load {
                    pointer: [52],
                },
                [122]: Binary {
                    op: Add,
                    left: [99],
                    right: [113],
                },
                [123]: Literal(
                    U32(
                        1,
                    ),
                ),
                [124]: Load {
                    pointer: [75],
                },
                [125]: Binary {
                    op: Add,
                    left: [124],
                    right: [123],
                },
                [126]: AccessIndex {
                    base: [0],
                    index: 0,
                },
                [127]: Load {
                    pointer: [52],
                },
                [128]: Load {
                    pointer: [126],
                },
                [129]: Binary {
                    op: Add,
                    left: [128],
                    right: [127],
                },
                [130]: AccessIndex {
                    base: [0],
                    index: 1,
                },
                [131]: Load {
                    pointer: [55],
                },
                [132]: Load {
                    pointer: [130],
                },
                [133]: Binary {
                    op: Add,
                    left: [132],
                    right: [131],
                },
                [134]: AccessIndex {
                    base: [0],
                    index: 2,
                },
                [135]: Load {
                    pointer: [58],
                },
                [136]: Load {
                    pointer: [134],
                },
                [137]: Binary {
                    op: Add,
                    left: [136],
                    right: [135],
                },
                [138]: AccessIndex {
                    base: [0],
                    index: 3,
                },
                [139]: Load {
                    pointer: [61],
                },
                [140]: Load {
                    pointer: [138],
                },
                [141]: Binary {
                    op: Add,
                    left: [140],
                    right: [139],
                },
                [142]: AccessIndex {
                    base: [0],
                    index: 4,
                },
                [143]: Load {
                    pointer: [64],
                },
                [144]: Load {
                    pointer: [142],
                },
                [145]: Binary {
                    op: Add,
                    left: [144],
                    right: [143],
                },
                [146]: AccessIndex {
                    base: [0],
                    index: 5,
                },
                [147]: Load {
                    pointer: [67],
                },
                [148]: Load {
                    pointer: [146],
                },
                [149]: Binary {
                    op: Add,
                    left: [148],
                    right: [147],
                },
                [150]: AccessIndex {
                    base: [0],
                    index: 6,
                },
                [151]: Load {
                    pointer: [70],
                },
                [152]: Load {
                    pointer: [150],
                },
                [153]: Binary {
                    op: Add,
                    left: [152],
                    right: [151],
                },
                [154]: AccessIndex {
                    base: [0],
                    index: 7,
                },
                [155]: Load {
                    pointer: [73],
                },
                [156]: Load {
                    pointer: [154],
                },
                [157]: Binary {
                    op: Add,
                    left: [156],
                    right: [155],
                },
            },
            named_expressions: {
                [0]: "state",
                [1]: "buf",
                [99]: "T1",
                [113]: "T2",
            },
            body: Block {
                body: [
                    Loop {
                        body: Block {
                            body: [
                                Emit(
                                    [5..6],
                                ),
                                Emit(
                                    [7..8],
                                ),
                                If {
                                    condition: [7],
                                    accept: Block {
                                        body: [],
                                        span_info: [],
                                    },
                                    reject: Block {
                                        body: [
                                            Break,
                                        ],
                                        span_info: [
                                            Span {
                                                start: 4167,
                                                end: 4176,
                                            },
                                        ],
                                    },
                                },
                                Block(
                                    Block {
                                        body: [
                                            Emit(
                                                [8..11],
                                            ),
                                            Call {
                                                function: [5],
                                                arguments: [
                                                    [1],
                                                    [10],
                                                ],
                                                result: Some(
                                                    [11],
                                                ),
                                            },
                                            Store {
                                                pointer: [9],
                                                value: [11],
                                            },
                                        ],
                                        span_info: [
                                            Span {
                                                start: 4192,
                                                end: 4196,
                                            },
                                            Span {
                                                start: 4199,
                                                end: 4216,
                                            },
                                            Span {
                                                start: 4192,
                                                end: 4216,
                                            },
                                        ],
                                    },
                                ),
                            ],
                            span_info: [
                                Span {
                                    start: 0,
                                    end: 0,
                                },
                                Span {
                                    start: 4168,
                                    end: 4175,
                                },
                                Span {
                                    start: 4167,
                                    end: 4176,
                                },
                                Span {
                                    start: 4182,
                                    end: 4217,
                                },
                            ],
                        },
                        continuing: Block {
                            body: [
                                Emit(
                                    [13..15],
                                ),
                                Store {
                                    pointer: [4],
                                    value: [14],
                                },
                            ],
                            span_info: [
                                Span {
                                    start: 4177,
                                    end: 4180,
                                },
                                Span {
                                    start: 4177,
                                    end: 4180,
                                },
                            ],
                        },
                        break_if: None,
                    },
                    Loop {
                        body: Block {
                            body: [
                                Emit(
                                    [17..18],
                                ),
                                Emit(
                                    [19..20],
                                ),
                                If {
                                    condition: [19],
                                    accept: Block {
                                        body: [],
                                        span_info: [],
                                    },
                                    reject: Block {
                                        body: [
                                            Break,
                                        ],
                                        span_info: [
                                            Span {
                                                start: 4285,
                                                end: 4294,
                                            },
                                        ],
                                    },
                                },
                                Block(
                                    Block {
                                        body: [
                                            Emit(
                                                [20..23],
                                            ),
                                            Emit(
                                                [24..28],
                                            ),
                                            Emit(
                                                [29..32],
                                            ),
                                            Call {
                                                function: [3],
                                                arguments: [
                                                    [31],
                                                ],
                                                result: Some(
                                                    [32],
                                                ),
                                            },
                                            Emit(
                                                [33..35],
                                            ),
                                            Emit(
                                                [36..41],
                                            ),
                                            Emit(
                                                [42..45],
                                            ),
                                            Call {
                                                function: [4],
                                                arguments: [
                                                    [44],
                                                ],
                                                result: Some(
                                                    [45],
                                                ),
                                            },
                                            Emit(
                                                [46..47],
                                            ),
                                            Store {
                                                pointer: [21],
                                                value: [46],
                                            },
                                        ],
                                        span_info: [
                                            Span {
                                                start: 4310,
                                                end: 4314,
                                            },
                                            Span {
                                                start: 4317,
                                                end: 4327,
                                            },
                                            Span {
                                                start: 4333,
                                                end: 4343,
                                            },
                                            Span {
                                                start: 4330,
                                                end: 4344,
                                            },
                                            Span {
                                                start: 4317,
                                                end: 4344,
                                            },
                                            Span {
                                                start: 4317,
                                                end: 4356,
                                            },
                                            Span {
                                                start: 4362,
                                                end: 4371,
                                            },
                                            Span {
                                                start: 4359,
                                                end: 4372,
                                            },
                                            Span {
                                                start: 4317,
                                                end: 4372,
                                            },
                                            Span {
                                                start: 4310,
                                                end: 4372,
                                            },
                                        ],
                                    },
                                ),
                            ],
                            span_info: [
                                Span {
                                    start: 0,
                                    end: 0,
                                },
                                Span {
                                    start: 4286,
                                    end: 4293,
                                },
                                Span {
                                    start: 4285,
                                    end: 4294,
                                },
                                Span {
                                    start: 4300,
                                    end: 4373,
                                },
                            ],
                        },
                        continuing: Block {
                            body: [
                                Emit(
                                    [48..50],
                                ),
                                Store {
                                    pointer: [16],
                                    value: [49],
                                },
                            ],
                            span_info: [
                                Span {
                                    start: 4295,
                                    end: 4298,
                                },
                                Span {
                                    start: 4295,
                                    end: 4298,
                                },
                            ],
                        },
                        break_if: None,
                    },
                    Emit(
                        [50..52],
                    ),
                    Store {
                        pointer: [52],
                        value: [51],
                    },
                    Emit(
                        [53..55],
                    ),
                    Store {
                        pointer: [55],
                        value: [54],
                    },
                    Emit(
                        [56..58],
                    ),
                    Store {
                        pointer: [58],
                        value: [57],
                    },
                    Emit(
                        [59..61],
                    ),
                    Store {
                        pointer: [61],
                        value: [60],
                    },
                    Emit(
                        [62..64],
                    ),
                    Store {
                        pointer: [64],
                        value: [63],
                    },
                    Emit(
                        [65..67],
                    ),
                    Store {
                        pointer: [67],
                        value: [66],
                    },
                    Emit(
                        [68..70],
                    ),
                    Store {
                        pointer: [70],
                        value: [69],
                    },
                    Emit(
                        [71..73],
                    ),
                    Store {
                        pointer: [73],
                        value: [72],
                    },
                    Loop {
                        body: Block {
                            body: [
                                Emit(
                                    [76..77],
                                ),
                                Emit(
                                    [78..79],
                                ),
                                If {
                                    condition: [78],
                                    accept: Block {
                                        body: [],
                                        span_info: [],
                                    },
                                    reject: Block {
                                        body: [
                                            Break,
                                        ],
                                        span_info: [
                                            Span {
                                                start: 4655,
                                                end: 4664,
                                            },
                                        ],
                                    },
                                },
                                Block(
                                    Block {
                                        body: [
                                            Emit(
                                                [79..81],
                                            ),
                                            Call {
                                                function: [2],
                                                arguments: [
                                                    [80],
                                                ],
                                                result: Some(
                                                    [81],
                                                ),
                                            },
                                            Emit(
                                                [82..92],
                                            ),
                                            Emit(
                                                [93..100],
                                            ),
                                            Emit(
                                                [100..101],
                                            ),
                                            Call {
                                                function: [1],
                                                arguments: [
                                                    [100],
                                                ],
                                                result: Some(
                                                    [101],
                                                ),
                                            },
                                            Emit(
                                                [102..114],
                                            ),
                                            Emit(
                                                [114..115],
                                            ),
                                            Store {
                                                pointer: [73],
                                                value: [114],
                                            },
                                            Emit(
                                                [115..116],
                                            ),
                                            Store {
                                                pointer: [70],
                                                value: [115],
                                            },
                                            Emit(
                                                [116..117],
                                            ),
                                            Store {
                                                pointer: [67],
                                                value: [116],
                                            },
                                            Emit(
                                                [117..119],
                                            ),
                                            Store {
                                                pointer: [64],
                                                value: [118],
                                            },
                                            Emit(
                                                [119..120],
                                            ),
                                            Store {
                                                pointer: [61],
                                                value: [119],
                                            },
                                            Emit(
                                                [120..121],
                                            ),
                                            Store {
                                                pointer: [58],
                                                value: [120],
                                            },
                                            Emit(
                                                [121..122],
                                            ),
                                            Store {
                                                pointer: [55],
                                                value: [121],
                                            },
                                            Emit(
                                                [122..123],
                                            ),
                                            Store {
                                                pointer: [52],
                                                value: [122],
                                            },
                                        ],
                                        span_info: [
                                            Span {
                                                start: 0,
                                                end: 0,
                                            },
                                            Span {
                                                start: 4693,
                                                end: 4698,
                                            },
                                            Span {
                                                start: 4689,
                                                end: 4721,
                                            },
                                            Span {
                                                start: 4689,
                                                end: 4735,
                                            },
                                            Span {
                                                start: 0,
                                                end: 0,
                                            },
                                            Span {
                                                start: 4754,
                                                end: 4759,
                                            },
                                            Span {
                                                start: 4754,
                                                end: 4791,
                                            },
                                            Span {
                                                start: 0,
                                                end: 0,
                                            },
                                            Span {
                                                start: 4802,
                                                end: 4807,
                                            },
                                            Span {
                                                start: 0,
                                                end: 0,
                                            },
                                            Span {
                                                start: 4817,
                                                end: 4822,
                                            },
                                            Span {
                                                start: 0,
                                                end: 0,
                                            },
                                            Span {
                                                start: 4832,
                                                end: 4837,
                                            },
                                            Span {
                                                start: 4851,
                                                end: 4857,
                                            },
                                            Span {
                                                start: 4847,
                                                end: 4857,
                                            },
                                            Span {
                                                start: 0,
                                                end: 0,
                                            },
                                            Span {
                                                start: 4867,
                                                end: 4872,
                                            },
                                            Span {
                                                start: 0,
                                                end: 0,
                                            },
                                            Span {
                                                start: 4882,
                                                end: 4887,
                                            },
                                            Span {
                                                start: 0,
                                                end: 0,
                                            },
                                            Span {
                                                start: 4897,
                                                end: 4902,
                                            },
                                            Span {
                                                start: 4916,
                                                end: 4923,
                                            },
                                            Span {
                                                start: 4912,
                                                end: 4923,
                                            },
                                        ],
                                    },
                                ),
                            ],
                            span_info: [
                                Span {
                                    start: 0,
                                    end: 0,
                                },
                                Span {
                                    start: 4656,
                                    end: 4663,
                                },
                                Span {
                                    start: 4655,
                                    end: 4664,
                                },
                                Span {
                                    start: 4670,
                                    end: 4924,
                                },
                            ],
                        },
                        continuing: Block {
                            body: [
                                Emit(
                                    [124..126],
                                ),
                                Store {
                                    pointer: [75],
                                    value: [125],
                                },
                            ],
                            span_info: [
                                Span {
                                    start: 4665,
                                    end: 4668,
                                },
                                Span {
                                    start: 4665,
                                    end: 4668,
                                },
                            ],
                        },
                        break_if: None,
                    },
                    Emit(
                        [126..130],
                    ),
                    Store {
                        pointer: [126],
                        value: [129],
                    },
                    Emit(
                        [130..134],
                    ),
                    Store {
                        pointer: [130],
                        value: [133],
                    },
                    Emit(
                        [134..138],
                    ),
                    Store {
                        pointer: [134],
                        value: [137],
                    },
                    Emit(
                        [138..142],
                    ),
                    Store {
                        pointer: [138],
                        value: [141],
                    },
                    Emit(
                        [142..146],
                    ),
                    Store {
                        pointer: [142],
                        value: [145],
                    },
                    Emit(
                        [146..150],
                    ),
                    Store {
                        pointer: [146],
                        value: [149],
                    },
                    Emit(
                        [150..154],
                    ),
                    Store {
                        pointer: [150],
                        value: [153],
                    },
                    Emit(
                        [154..158],
                    ),
                    Store {
                        pointer: [154],
                        value: [157],
                    },
                    Return {
                        value: None,
                    },
                ],
                span_info: [
                    Span {
                        start: 4151,
                        end: 4217,
                    },
                    Span {
                        start: 4268,
                        end: 4373,
                    },
                    Span {
                        start: 4429,
                        end: 4440,
                    },
                    Span {
                        start: 4421,
                        end: 4441,
                    },
                    Span {
                        start: 4454,
                        end: 4465,
                    },
                    Span {
                        start: 4446,
                        end: 4466,
                    },
                    Span {
                        start: 4479,
                        end: 4490,
                    },
                    Span {
                        start: 4471,
                        end: 4491,
                    },
                    Span {
                        start: 4504,
                        end: 4515,
                    },
                    Span {
                        start: 4496,
                        end: 4516,
                    },
                    Span {
                        start: 4529,
                        end: 4540,
                    },
                    Span {
                        start: 4521,
                        end: 4541,
                    },
                    Span {
                        start: 4554,
                        end: 4565,
                    },
                    Span {
                        start: 4546,
                        end: 4566,
                    },
                    Span {
                        start: 4579,
                        end: 4590,
                    },
                    Span {
                        start: 4571,
                        end: 4591,
                    },
                    Span {
                        start: 4604,
                        end: 4615,
                    },
                    Span {
                        start: 4596,
                        end: 4616,
                    },
                    Span {
                        start: 4639,
                        end: 4924,
                    },
                    Span {
                        start: 4994,
                        end: 5010,
                    },
                    Span {
                        start: 4994,
                        end: 5010,
                    },
                    Span {
                        start: 5016,
                        end: 5032,
                    },
                    Span {
                        start: 5016,
                        end: 5032,
                    },
                    Span {
                        start: 5038,
                        end: 5054,
                    },
                    Span {
                        start: 5038,
                        end: 5054,
                    },
                    Span {
                        start: 5060,
                        end: 5076,
                    },
                    Span {
                        start: 5060,
                        end: 5076,
                    },
                    Span {
                        start: 5082,
                        end: 5098,
                    },
                    Span {
                        start: 5082,
                        end: 5098,
                    },
                    Span {
                        start: 5104,
                        end: 5120,
                    },
                    Span {
                        start: 5104,
                        end: 5120,
                    },
                    Span {
                        start: 5126,
                        end: 5142,
                    },
                    Span {
                        start: 5126,
                        end: 5142,
                    },
                    Span {
                        start: 5148,
                        end: 5164,
                    },
                    Span {
                        start: 5148,
                        end: 5164,
                    },
                    Span {
                        start: 0,
                        end: 0,
                    },
                ],
            },
            diagnostic_filter_leaf: None,
        },
        [9]: Function {
            name: Some(
                "sha512_init",
            ),
            arguments: [
                FunctionArgument {
                    name: Some(
                        "ctx",
                    ),
                    ty: [10],
                    binding: None,
                },
            ],
            result: None,
            local_variables: {},
            expressions: {
                [0]: FunctionArgument(
                    0,
                ),
                [1]: AccessIndex {
                    base: [0],
                    index: 3,
                },
                [2]: Literal(
                    U32(
                        0,
                    ),
                ),
                [3]: AccessIndex {
                    base: [0],
                    index: 1,
                },
                [4]: Literal(
                    U64(
                        0,
                    ),
                ),
                [5]: AccessIndex {
                    base: [0],
                    index: 0,
                },
                [6]: AccessIndex {
                    base: [5],
                    index: 0,
                },
                [7]: Literal(
                    U64(
                        7640891576956012808,
                    ),
                ),
                [8]: AccessIndex {
                    base: [0],
                    index: 0,
                },
                [9]: AccessIndex {
                    base: [8],
                    index: 1,
                },
                [10]: Literal(
                    U64(
                        13503953896175478587,
                    ),
                ),
                [11]: AccessIndex {
                    base: [0],
                    index: 0,
                },
                [12]: AccessIndex {
                    base: [11],
                    index: 2,
                },
                [13]: Literal(
                    U64(
                        4354685564936845355,
                    ),
                ),
                [14]: AccessIndex {
                    base: [0],
                    index: 0,
                },
                [15]: AccessIndex {
                    base: [14],
                    index: 3,
                },
                [16]: Literal(
                    U64(
                        11912009170470909681,
                    ),
                ),
                [17]: AccessIndex {
                    base: [0],
                    index: 0,
                },
                [18]: AccessIndex {
                    base: [17],
                    index: 4,
                },
                [19]: Literal(
                    U64(
                        5840696475078001361,
                    ),
                ),
                [20]: AccessIndex {
                    base: [0],
                    index: 0,
                },
                [21]: AccessIndex {
                    base: [20],
                    index: 5,
                },
                [22]: Literal(
                    U64(
                        11170449401992604703,
                    ),
                ),
                [23]: AccessIndex {
                    base: [0],
                    index: 0,
                },
                [24]: AccessIndex {
                    base: [23],
                    index: 6,
                },
                [25]: Literal(
                    U64(
                        2270897969802886507,
                    ),
                ),
                [26]: AccessIndex {
                    base: [0],
                    index: 0,
                },
                [27]: AccessIndex {
                    base: [26],
                    index: 7,
                },
                [28]: Literal(
                    U64(
                        6620516959819538809,
                    ),
                ),
            },
            named_expressions: {
                [0]: "ctx",
            },
            body: Block {
                body: [
                    Emit(
                        [1..2],
                    ),
                    Store {
                        pointer: [1],
                        value: [2],
                    },
                    Emit(
                        [3..4],
                    ),
                    Store {
                        pointer: [3],
                        value: [4],
                    },
                    Emit(
                        [5..6],
                    ),
                    Emit(
                        [6..7],
                    ),
                    Store {
                        pointer: [6],
                        value: [7],
                    },
                    Emit(
                        [8..9],
                    ),
                    Emit(
                        [9..10],
                    ),
                    Store {
                        pointer: [9],
                        value: [10],
                    },
                    Emit(
                        [11..12],
                    ),
                    Emit(
                        [12..13],
                    ),
                    Store {
                        pointer: [12],
                        value: [13],
                    },
                    Emit(
                        [14..15],
                    ),
                    Emit(
                        [15..16],
                    ),
                    Store {
                        pointer: [15],
                        value: [16],
                    },
                    Emit(
                        [17..18],
                    ),
                    Emit(
                        [18..19],
                    ),
                    Store {
                        pointer: [18],
                        value: [19],
                    },
                    Emit(
                        [20..21],
                    ),
                    Emit(
                        [21..22],
                    ),
                    Store {
                        pointer: [21],
                        value: [22],
                    },
                    Emit(
                        [23..24],
                    ),
                    Emit(
                        [24..25],
                    ),
                    Store {
                        pointer: [24],
                        value: [25],
                    },
                    Emit(
                        [26..27],
                    ),
                    Emit(
                        [27..28],
                    ),
                    Store {
                        pointer: [27],
                        value: [28],
                    },
                    Return {
                        value: None,
                    },
                ],
                span_info: [
                    Span {
                        start: 5222,
                        end: 5233,
                    },
                    Span {
                        start: 5222,
                        end: 5238,
                    },
                    Span {
                        start: 5244,
                        end: 5256,
                    },
                    Span {
                        start: 5244,
                        end: 5262,
                    },
                    Span {
                        start: 5381,
                        end: 5393,
                    },
                    Span {
                        start: 5381,
                        end: 5396,
                    },
                    Span {
                        start: 5381,
                        end: 5419,
                    },
                    Span {
                        start: 5425,
                        end: 5437,
                    },
                    Span {
                        start: 5425,
                        end: 5440,
                    },
                    Span {
                        start: 5425,
                        end: 5463,
                    },
                    Span {
                        start: 5469,
                        end: 5481,
                    },
                    Span {
                        start: 5469,
                        end: 5484,
                    },
                    Span {
                        start: 5469,
                        end: 5507,
                    },
                    Span {
                        start: 5513,
                        end: 5525,
                    },
                    Span {
                        start: 5513,
                        end: 5528,
                    },
                    Span {
                        start: 5513,
                        end: 5551,
                    },
                    Span {
                        start: 5557,
                        end: 5569,
                    },
                    Span {
                        start: 5557,
                        end: 5572,
                    },
                    Span {
                        start: 5557,
                        end: 5595,
                    },
                    Span {
                        start: 5601,
                        end: 5613,
                    },
                    Span {
                        start: 5601,
                        end: 5616,
                    },
                    Span {
                        start: 5601,
                        end: 5639,
                    },
                    Span {
                        start: 5645,
                        end: 5657,
                    },
                    Span {
                        start: 5645,
                        end: 5660,
                    },
                    Span {
                        start: 5645,
                        end: 5683,
                    },
                    Span {
                        start: 5689,
                        end: 5701,
                    },
                    Span {
                        start: 5689,
                        end: 5704,
                    },
                    Span {
                        start: 5689,
                        end: 5727,
                    },
                    Span {
                        start: 0,
                        end: 0,
                    },
                ],
            },
            diagnostic_filter_leaf: None,
        },
        [10]: Function {
            name: Some(
                "sha512_update",
            ),
            arguments: [
                FunctionArgument {
                    name: Some(
                        "ctx",
                    ),
                    ty: [10],
                    binding: None,
                },
                FunctionArgument {
                    name: Some(
                        "data",
                    ),
                    ty: [12],
                    binding: None,
                },
                FunctionArgument {
                    name: Some(
                        "len",
                    ),
                    ty: [3],
                    binding: None,
                },
            ],
            result: None,
            local_variables: {
                [0]: LocalVariable {
                    name: Some(
                        "remaining",
                    ),
                    ty: [3],
                    init: None,
                },
                [1]: LocalVariable {
                    name: Some(
                        "data_offset",
                    ),
                    ty: [3],
                    init: Some(
                        [4],
                    ),
                },
                [2]: LocalVariable {
                    name: Some(
                        "i",
                    ),
                    ty: [3],
                    init: None,
                },
                [3]: LocalVariable {
                    name: Some(
                        "i",
                    ),
                    ty: [3],
                    init: Some(
                        [78],
                    ),
                },
            },
            expressions: {
                [0]: FunctionArgument(
                    0,
                ),
                [1]: FunctionArgument(
                    1,
                ),
                [2]: FunctionArgument(
                    2,
                ),
                [3]: LocalVariable(
                    [0],
                ),
                [4]: Literal(
                    U32(
                        0,
                    ),
                ),
                [5]: LocalVariable(
                    [1],
                ),
                [6]: AccessIndex {
                    base: [0],
                    index: 3,
                },
                [7]: Load {
                    pointer: [6],
                },
                [8]: Literal(
                    U32(
                        0,
                    ),
                ),
                [9]: Binary {
                    op: Greater,
                    left: [7],
                    right: [8],
                },
                [10]: AccessIndex {
                    base: [0],
                    index: 3,
                },
                [11]: Load {
                    pointer: [10],
                },
                [12]: Literal(
                    U32(
                        128,
                    ),
                ),
                [13]: Binary {
                    op: Less,
                    left: [11],
                    right: [12],
                },
                [14]: Load {
                    pointer: [3],
                },
                [15]: Literal(
                    U32(
                        0,
                    ),
                ),
                [16]: Binary {
                    op: Greater,
                    left: [14],
                    right: [15],
                },
                [17]: Binary {
                    op: LogicalAnd,
                    left: [13],
                    right: [16],
                },
                [18]: AccessIndex {
                    base: [0],
                    index: 2,
                },
                [19]: AccessIndex {
                    base: [0],
                    index: 3,
                },
                [20]: Load {
                    pointer: [19],
                },
                [21]: Access {
                    base: [18],
                    index: [20],
                },
                [22]: Load {
                    pointer: [5],
                },
                [23]: Access {
                    base: [1],
                    index: [22],
                },
                [24]: Load {
                    pointer: [23],
                },
                [25]: AccessIndex {
                    base: [0],
                    index: 3,
                },
                [26]: Literal(
                    U32(
                        1,
                    ),
                ),
                [27]: Load {
                    pointer: [25],
                },
                [28]: Binary {
                    op: Add,
                    left: [27],
                    right: [26],
                },
                [29]: Literal(
                    U32(
                        1,
                    ),
                ),
                [30]: Load {
                    pointer: [5],
                },
                [31]: Binary {
                    op: Add,
                    left: [30],
                    right: [29],
                },
                [32]: Literal(
                    U32(
                        1,
                    ),
                ),
                [33]: Load {
                    pointer: [3],
                },
                [34]: Binary {
                    op: Subtract,
                    left: [33],
                    right: [32],
                },
                [35]: AccessIndex {
                    base: [0],
                    index: 3,
                },
                [36]: Load {
                    pointer: [35],
                },
                [37]: Literal(
                    U32(
                        128,
                    ),
                ),
                [38]: Binary {
                    op: Less,
                    left: [36],
                    right: [37],
                },
                [39]: AccessIndex {
                    base: [0],
                    index: 0,
                },
                [40]: AccessIndex {
                    base: [0],
                    index: 2,
                },
                [41]: AccessIndex {
                    base: [0],
                    index: 1,
                },
                [42]: Literal(
                    U64(
                        1,
                    ),
                ),
                [43]: Load {
                    pointer: [41],
                },
                [44]: Binary {
                    op: Add,
                    left: [43],
                    right: [42],
                },
                [45]: AccessIndex {
                    base: [0],
                    index: 3,
                },
                [46]: Literal(
                    U32(
                        0,
                    ),
                ),
                [47]: Load {
                    pointer: [3],
                },
                [48]: Literal(
                    U32(
                        128,
                    ),
                ),
                [49]: Binary {
                    op: GreaterEqual,
                    left: [47],
                    right: [48],
                },
                [50]: Literal(
                    U32(
                        0,
                    ),
                ),
                [51]: LocalVariable(
                    [2],
                ),
                [52]: Load {
                    pointer: [51],
                },
                [53]: Literal(
                    U32(
                        128,
                    ),
                ),
                [54]: Binary {
                    op: Less,
                    left: [52],
                    right: [53],
                },
                [55]: AccessIndex {
                    base: [0],
                    index: 2,
                },
                [56]: Load {
                    pointer: [51],
                },
                [57]: Access {
                    base: [55],
                    index: [56],
                },
                [58]: Load {
                    pointer: [5],
                },
                [59]: Load {
                    pointer: [51],
                },
                [60]: Binary {
                    op: Add,
                    left: [58],
                    right: [59],
                },
                [61]: Access {
                    base: [1],
                    index: [60],
                },
                [62]: Load {
                    pointer: [61],
                },
                [63]: Literal(
                    U32(
                        1,
                    ),
                ),
                [64]: Load {
                    pointer: [51],
                },
                [65]: Binary {
                    op: Add,
                    left: [64],
                    right: [63],
                },
                [66]: AccessIndex {
                    base: [0],
                    index: 0,
                },
                [67]: AccessIndex {
                    base: [0],
                    index: 2,
                },
                [68]: AccessIndex {
                    base: [0],
                    index: 1,
                },
                [69]: Literal(
                    U64(
                        1,
                    ),
                ),
                [70]: Load {
                    pointer: [68],
                },
                [71]: Binary {
                    op: Add,
                    left: [70],
                    right: [69],
                },
                [72]: Literal(
                    U32(
                        128,
                    ),
                ),
                [73]: Load {
                    pointer: [5],
                },
                [74]: Binary {
                    op: Add,
                    left: [73],
                    right: [72],
                },
                [75]: Literal(
                    U32(
                        128,
                    ),
                ),
                [76]: Load {
                    pointer: [3],
                },
                [77]: Binary {
                    op: Subtract,
                    left: [76],
                    right: [75],
                },
                [78]: Literal(
                    U32(
                        0,
                    ),
                ),
                [79]: LocalVariable(
                    [3],
                ),
                [80]: Load {
                    pointer: [79],
                },
                [81]: Load {
                    pointer: [3],
                },
                [82]: Binary {
                    op: Less,
                    left: [80],
                    right: [81],
                },
                [83]: AccessIndex {
                    base: [0],
                    index: 2,
                },
                [84]: Load {
                    pointer: [79],
                },
                [85]: Access {
                    base: [83],
                    index: [84],
                },
                [86]: Load {
                    pointer: [5],
                },
                [87]: Load {
                    pointer: [79],
                },
                [88]: Binary {
                    op: Add,
                    left: [86],
                    right: [87],
                },
                [89]: Access {
                    base: [1],
                    index: [88],
                },
                [90]: Load {
                    pointer: [89],
                },
                [91]: Literal(
                    U32(
                        1,
                    ),
                ),
                [92]: Load {
                    pointer: [79],
                },
                [93]: Binary {
                    op: Add,
                    left: [92],
                    right: [91],
                },
                [94]: AccessIndex {
                    base: [0],
                    index: 3,
                },
                [95]: Load {
                    pointer: [3],
                },
            },
            named_expressions: {
                [0]: "ctx",
                [1]: "data",
                [2]: "len",
            },
            body: Block {
                body: [
                    Store {
                        pointer: [3],
                        value: [2],
                    },
                    Emit(
                        [6..8],
                    ),
                    Emit(
                        [9..10],
                    ),
                    If {
                        condition: [9],
                        accept: Block {
                            body: [
                                Loop {
                                    body: Block {
                                        body: [
                                            Emit(
                                                [10..12],
                                            ),
                                            Emit(
                                                [13..15],
                                            ),
                                            Emit(
                                                [16..18],
                                            ),
                                            If {
                                                condition: [17],
                                                accept: Block {
                                                    body: [],
                                                    span_info: [],
                                                },
                                                reject: Block {
                                                    body: [
                                                        Break,
                                                    ],
                                                    span_info: [
                                                        Span {
                                                            start: 5984,
                                                            end: 6034,
                                                        },
                                                    ],
                                                },
                                            },
                                            Block(
                                                Block {
                                                    body: [
                                                        Emit(
                                                            [18..25],
                                                        ),
                                                        Store {
                                                            pointer: [21],
                                                            value: [24],
                                                        },
                                                        Emit(
                                                            [25..26],
                                                        ),
                                                        Emit(
                                                            [27..29],
                                                        ),
                                                        Store {
                                                            pointer: [25],
                                                            value: [28],
                                                        },
                                                        Emit(
                                                            [30..32],
                                                        ),
                                                        Store {
                                                            pointer: [5],
                                                            value: [31],
                                                        },
                                                        Emit(
                                                            [33..35],
                                                        ),
                                                        Store {
                                                            pointer: [3],
                                                            value: [34],
                                                        },
                                                    ],
                                                    span_info: [
                                                        Span {
                                                            start: 6049,
                                                            end: 6098,
                                                        },
                                                        Span {
                                                            start: 6049,
                                                            end: 6098,
                                                        },
                                                        Span {
                                                            start: 6112,
                                                            end: 6123,
                                                        },
                                                        Span {
                                                            start: 6112,
                                                            end: 6129,
                                                        },
                                                        Span {
                                                            start: 6112,
                                                            end: 6129,
                                                        },
                                                        Span {
                                                            start: 6143,
                                                            end: 6160,
                                                        },
                                                        Span {
                                                            start: 6143,
                                                            end: 6160,
                                                        },
                                                        Span {
                                                            start: 6174,
                                                            end: 6189,
                                                        },
                                                        Span {
                                                            start: 6174,
                                                            end: 6189,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                        span_info: [
                                            Span {
                                                start: 5985,
                                                end: 5996,
                                            },
                                            Span {
                                                start: 5985,
                                                end: 6016,
                                            },
                                            Span {
                                                start: 5985,
                                                end: 6034,
                                            },
                                            Span {
                                                start: 5984,
                                                end: 6034,
                                            },
                                            Span {
                                                start: 6035,
                                                end: 6190,
                                            },
                                        ],
                                    },
                                    continuing: Block {
                                        body: [],
                                        span_info: [],
                                    },
                                    break_if: None,
                                },
                                Emit(
                                    [35..37],
                                ),
                                Emit(
                                    [38..39],
                                ),
                                If {
                                    condition: [38],
                                    accept: Block {
                                        body: [
                                            Return {
                                                value: None,
                                            },
                                        ],
                                        span_info: [
                                            Span {
                                                start: 6259,
                                                end: 6266,
                                            },
                                        ],
                                    },
                                    reject: Block {
                                        body: [],
                                        span_info: [],
                                    },
                                },
                                Emit(
                                    [39..41],
                                ),
                                Call {
                                    function: [8],
                                    arguments: [
                                        [39],
                                        [40],
                                    ],
                                    result: None,
                                },
                                Emit(
                                    [41..42],
                                ),
                                Emit(
                                    [43..45],
                                ),
                                Store {
                                    pointer: [41],
                                    value: [44],
                                },
                                Emit(
                                    [45..46],
                                ),
                                Store {
                                    pointer: [45],
                                    value: [46],
                                },
                            ],
                            span_info: [
                                Span {
                                    start: 5979,
                                    end: 6190,
                                },
                                Span {
                                    start: 6213,
                                    end: 6224,
                                },
                                Span {
                                    start: 6213,
                                    end: 6244,
                                },
                                Span {
                                    start: 6210,
                                    end: 6266,
                                },
                                Span {
                                    start: 6296,
                                    end: 6324,
                                },
                                Span {
                                    start: 6286,
                                    end: 6325,
                                },
                                Span {
                                    start: 6335,
                                    end: 6347,
                                },
                                Span {
                                    start: 6335,
                                    end: 6354,
                                },
                                Span {
                                    start: 6335,
                                    end: 6354,
                                },
                                Span {
                                    start: 6364,
                                    end: 6375,
                                },
                                Span {
                                    start: 6364,
                                    end: 6380,
                                },
                            ],
                        },
                        reject: Block {
                            body: [],
                            span_info: [],
                        },
                    },
                    Loop {
                        body: Block {
                            body: [
                                Emit(
                                    [47..48],
                                ),
                                Emit(
                                    [49..50],
                                ),
                                If {
                                    condition: [49],
                                    accept: Block {
                                        body: [],
                                        span_info: [],
                                    },
                                    reject: Block {
                                        body: [
                                            Break,
                                        ],
                                        span_info: [
                                            Span {
                                                start: 6429,
                                                end: 6460,
                                            },
                                        ],
                                    },
                                },
                                Block(
                                    Block {
                                        body: [
                                            Store {
                                                pointer: [51],
                                                value: [50],
                                            },
                                            Loop {
                                                body: Block {
                                                    body: [
                                                        Emit(
                                                            [52..53],
                                                        ),
                                                        Emit(
                                                            [54..55],
                                                        ),
                                                        If {
                                                            condition: [54],
                                                            accept: Block {
                                                                body: [],
                                                                span_info: [],
                                                            },
                                                            reject: Block {
                                                                body: [
                                                                    Break,
                                                                ],
                                                                span_info: [
                                                                    Span {
                                                                        start: 6518,
                                                                        end: 6541,
                                                                    },
                                                                ],
                                                            },
                                                        },
                                                        Block(
                                                            Block {
                                                                body: [
                                                                    Emit(
                                                                        [55..63],
                                                                    ),
                                                                    Store {
                                                                        pointer: [57],
                                                                        value: [62],
                                                                    },
                                                                ],
                                                                span_info: [
                                                                    Span {
                                                                        start: 6561,
                                                                        end: 6604,
                                                                    },
                                                                    Span {
                                                                        start: 6561,
                                                                        end: 6604,
                                                                    },
                                                                ],
                                                            },
                                                        ),
                                                    ],
                                                    span_info: [
                                                        Span {
                                                            start: 0,
                                                            end: 0,
                                                        },
                                                        Span {
                                                            start: 6519,
                                                            end: 6540,
                                                        },
                                                        Span {
                                                            start: 6518,
                                                            end: 6541,
                                                        },
                                                        Span {
                                                            start: 6547,
                                                            end: 6605,
                                                        },
                                                    ],
                                                },
                                                continuing: Block {
                                                    body: [
                                                        Emit(
                                                            [64..66],
                                                        ),
                                                        Store {
                                                            pointer: [51],
                                                            value: [65],
                                                        },
                                                    ],
                                                    span_info: [
                                                        Span {
                                                            start: 6542,
                                                            end: 6545,
                                                        },
                                                        Span {
                                                            start: 6542,
                                                            end: 6545,
                                                        },
                                                    ],
                                                },
                                                break_if: None,
                                            },
                                            Emit(
                                                [66..68],
                                            ),
                                            Call {
                                                function: [8],
                                                arguments: [
                                                    [66],
                                                    [67],
                                                ],
                                                result: None,
                                            },
                                            Emit(
                                                [68..69],
                                            ),
                                            Emit(
                                                [70..72],
                                            ),
                                            Store {
                                                pointer: [68],
                                                value: [71],
                                            },
                                            Emit(
                                                [73..75],
                                            ),
                                            Store {
                                                pointer: [5],
                                                value: [74],
                                            },
                                            Emit(
                                                [76..78],
                                            ),
                                            Store {
                                                pointer: [3],
                                                value: [77],
                                            },
                                        ],
                                        span_info: [
                                            Span {
                                                start: 6507,
                                                end: 6518,
                                            },
                                            Span {
                                                start: 6502,
                                                end: 6605,
                                            },
                                            Span {
                                                start: 6635,
                                                end: 6663,
                                            },
                                            Span {
                                                start: 6625,
                                                end: 6664,
                                            },
                                            Span {
                                                start: 6674,
                                                end: 6686,
                                            },
                                            Span {
                                                start: 6674,
                                                end: 6693,
                                            },
                                            Span {
                                                start: 6674,
                                                end: 6693,
                                            },
                                            Span {
                                                start: 6703,
                                                end: 6735,
                                            },
                                            Span {
                                                start: 6703,
                                                end: 6735,
                                            },
                                            Span {
                                                start: 6745,
                                                end: 6775,
                                            },
                                            Span {
                                                start: 6745,
                                                end: 6775,
                                            },
                                        ],
                                    },
                                ),
                            ],
                            span_info: [
                                Span {
                                    start: 0,
                                    end: 0,
                                },
                                Span {
                                    start: 6430,
                                    end: 6460,
                                },
                                Span {
                                    start: 6429,
                                    end: 6460,
                                },
                                Span {
                                    start: 6461,
                                    end: 6776,
                                },
                            ],
                        },
                        continuing: Block {
                            body: [],
                            span_info: [],
                        },
                        break_if: None,
                    },
                    Loop {
                        body: Block {
                            body: [
                                Emit(
                                    [80..83],
                                ),
                                If {
                                    condition: [82],
                                    accept: Block {
                                        body: [],
                                        span_info: [],
                                    },
                                    reject: Block {
                                        body: [
                                            Break,
                                        ],
                                        span_info: [
                                            Span {
                                                start: 6831,
                                                end: 6846,
                                            },
                                        ],
                                    },
                                },
                                Block(
                                    Block {
                                        body: [
                                            Emit(
                                                [83..91],
                                            ),
                                            Store {
                                                pointer: [85],
                                                value: [90],
                                            },
                                        ],
                                        span_info: [
                                            Span {
                                                start: 6862,
                                                end: 6905,
                                            },
                                            Span {
                                                start: 6862,
                                                end: 6905,
                                            },
                                        ],
                                    },
                                ),
                            ],
                            span_info: [
                                Span {
                                    start: 6832,
                                    end: 6845,
                                },
                                Span {
                                    start: 6831,
                                    end: 6846,
                                },
                                Span {
                                    start: 6852,
                                    end: 6906,
                                },
                            ],
                        },
                        continuing: Block {
                            body: [
                                Emit(
                                    [92..94],
                                ),
                                Store {
                                    pointer: [79],
                                    value: [93],
                                },
                            ],
                            span_info: [
                                Span {
                                    start: 6847,
                                    end: 6850,
                                },
                                Span {
                                    start: 6847,
                                    end: 6850,
                                },
                            ],
                        },
                        break_if: None,
                    },
                    Emit(
                        [94..96],
                    ),
                    Store {
                        pointer: [94],
                        value: [95],
                    },
                    Return {
                        value: None,
                    },
                ],
                span_info: [
                    Span {
                        start: 5854,
                        end: 5874,
                    },
                    Span {
                        start: 5952,
                        end: 5963,
                    },
                    Span {
                        start: 5952,
                        end: 5968,
                    },
                    Span {
                        start: 5949,
                        end: 6381,
                    },
                    Span {
                        start: 6424,
                        end: 6776,
                    },
                    Span {
                        start: 6815,
                        end: 6906,
                    },
                    Span {
                        start: 6918,
                        end: 6929,
                    },
                    Span {
                        start: 6918,
                        end: 6941,
                    },
                    Span {
                        start: 0,
                        end: 0,
                    },
                ],
            },
            diagnostic_filter_leaf: None,
        },
        [11]: Function {
            name: Some(
                "sha512_done",
            ),
            arguments: [
                FunctionArgument {
                    name: Some(
                        "ctx",
                    ),
                    ty: [10],
                    binding: None,
                },
            ],
            result: Some(
                FunctionResult {
                    ty: [7],
                    binding: None,
                },
            ),
            local_variables: {
                [0]: LocalVariable {
                    name: Some(
                        "out",
                    ),
                    ty: [7],
                    init: None,
                },
                [1]: LocalVariable {
                    name: Some(
                        "i",
                    ),
                    ty: [3],
                    init: Some(
                        [65],
                    ),
                },
            },
            expressions: {
                [0]: FunctionArgument(
                    0,
                ),
                [1]: LocalVariable(
                    [0],
                ),
                [2]: AccessIndex {
                    base: [0],
                    index: 3,
                },
                [3]: Load {
                    pointer: [2],
                },
                [4]: As {
                    expr: [3],
                    kind: Uint,
                    convert: Some(
                        8,
                    ),
                },
                [5]: AccessIndex {
                    base: [0],
                    index: 2,
                },
                [6]: AccessIndex {
                    base: [0],
                    index: 3,
                },
                [7]: Load {
                    pointer: [6],
                },
                [8]: Access {
                    base: [5],
                    index: [7],
                },
                [9]: Literal(
                    U32(
                        128,
                    ),
                ),
                [10]: AccessIndex {
                    base: [0],
                    index: 3,
                },
                [11]: Literal(
                    U32(
                        1,
                    ),
                ),
                [12]: Load {
                    pointer: [10],
                },
                [13]: Binary {
                    op: Add,
                    left: [12],
                    right: [11],
                },
                [14]: AccessIndex {
                    base: [0],
                    index: 3,
                },
                [15]: Load {
                    pointer: [14],
                },
                [16]: Literal(
                    U32(
                        112,
                    ),
                ),
                [17]: Binary {
                    op: Greater,
                    left: [15],
                    right: [16],
                },
                [18]: AccessIndex {
                    base: [0],
                    index: 3,
                },
                [19]: Load {
                    pointer: [18],
                },
                [20]: Literal(
                    U32(
                        128,
                    ),
                ),
                [21]: Binary {
                    op: Less,
                    left: [19],
                    right: [20],
                },
                [22]: AccessIndex {
                    base: [0],
                    index: 2,
                },
                [23]: AccessIndex {
                    base: [0],
                    index: 3,
                },
                [24]: Load {
                    pointer: [23],
                },
                [25]: Access {
                    base: [22],
                    index: [24],
                },
                [26]: Literal(
                    U32(
                        0,
                    ),
                ),
                [27]: AccessIndex {
                    base: [0],
                    index: 3,
                },
                [28]: Literal(
                    U32(
                        1,
                    ),
                ),
                [29]: Load {
                    pointer: [27],
                },
                [30]: Binary {
                    op: Add,
                    left: [29],
                    right: [28],
                },
                [31]: AccessIndex {
                    base: [0],
                    index: 0,
                },
                [32]: AccessIndex {
                    base: [0],
                    index: 2,
                },
                [33]: AccessIndex {
                    base: [0],
                    index: 3,
                },
                [34]: Literal(
                    U32(
                        0,
                    ),
                ),
                [35]: AccessIndex {
                    base: [0],
                    index: 3,
                },
                [36]: Load {
                    pointer: [35],
                },
                [37]: Literal(
                    U32(
                        112,
                    ),
                ),
                [38]: Binary {
                    op: Less,
                    left: [36],
                    right: [37],
                },
                [39]: AccessIndex {
                    base: [0],
                    index: 2,
                },
                [40]: AccessIndex {
                    base: [0],
                    index: 3,
                },
                [41]: Load {
                    pointer: [40],
                },
                [42]: Access {
                    base: [39],
                    index: [41],
                },
                [43]: Literal(
                    U32(
                        0,
                    ),
                ),
                [44]: AccessIndex {
                    base: [0],
                    index: 3,
                },
                [45]: Literal(
                    U32(
                        1,
                    ),
                ),
                [46]: Load {
                    pointer: [44],
                },
                [47]: Binary {
                    op: Add,
                    left: [46],
                    right: [45],
                },
                [48]: AccessIndex {
                    base: [0],
                    index: 1,
                },
                [49]: Load {
                    pointer: [48],
                },
                [50]: Literal(
                    U32(
                        7,
                    ),
                ),
                [51]: Binary {
                    op: ShiftLeft,
                    left: [49],
                    right: [50],
                },
                [52]: Binary {
                    op: InclusiveOr,
                    left: [51],
                    right: [4],
                },
                [53]: Literal(
                    U32(
                        3,
                    ),
                ),
                [54]: Binary {
                    op: ShiftLeft,
                    left: [52],
                    right: [53],
                },
                [55]: AccessIndex {
                    base: [0],
                    index: 2,
                },
                [56]: AccessIndex {
                    base: [0],
                    index: 1,
                },
                [57]: Load {
                    pointer: [56],
                },
                [58]: Literal(
                    U32(
                        54,
                    ),
                ),
                [59]: Binary {
                    op: ShiftRight,
                    left: [57],
                    right: [58],
                },
                [60]: Literal(
                    U32(
                        112,
                    ),
                ),
                [61]: AccessIndex {
                    base: [0],
                    index: 2,
                },
                [62]: Literal(
                    U32(
                        120,
                    ),
                ),
                [63]: AccessIndex {
                    base: [0],
                    index: 0,
                },
                [64]: AccessIndex {
                    base: [0],
                    index: 2,
                },
                [65]: Literal(
                    U32(
                        0,
                    ),
                ),
                [66]: LocalVariable(
                    [1],
                ),
                [67]: Load {
                    pointer: [66],
                },
                [68]: Literal(
                    U32(
                        8,
                    ),
                ),
                [69]: Binary {
                    op: Less,
                    left: [67],
                    right: [68],
                },
                [70]: AccessIndex {
                    base: [0],
                    index: 0,
                },
                [71]: Load {
                    pointer: [66],
                },
                [72]: Access {
                    base: [70],
                    index: [71],
                },
                [73]: Load {
                    pointer: [72],
                },
                [74]: Literal(
                    U32(
                        8,
                    ),
                ),
                [75]: Load {
                    pointer: [66],
                },
                [76]: Binary {
                    op: Multiply,
                    left: [74],
                    right: [75],
                },
                [77]: Literal(
                    U32(
                        1,
                    ),
                ),
                [78]: Load {
                    pointer: [66],
                },
                [79]: Binary {
                    op: Add,
                    left: [78],
                    right: [77],
                },
                [80]: Load {
                    pointer: [1],
                },
            },
            named_expressions: {
                [0]: "ctx",
                [4]: "rest",
                [54]: "bit_count",
            },
            body: Block {
                body: [
                    Emit(
                        [2..5],
                    ),
                    Emit(
                        [5..9],
                    ),
                    Store {
                        pointer: [8],
                        value: [9],
                    },
                    Emit(
                        [10..11],
                    ),
                    Emit(
                        [12..14],
                    ),
                    Store {
                        pointer: [10],
                        value: [13],
                    },
                    Emit(
                        [14..16],
                    ),
                    Emit(
                        [17..18],
                    ),
                    If {
                        condition: [17],
                        accept: Block {
                            body: [
                                Loop {
                                    body: Block {
                                        body: [
                                            Emit(
                                                [18..20],
                                            ),
                                            Emit(
                                                [21..22],
                                            ),
                                            If {
                                                condition: [21],
                                                accept: Block {
                                                    body: [],
                                                    span_info: [],
                                                },
                                                reject: Block {
                                                    body: [
                                                        Break,
                                                    ],
                                                    span_info: [
                                                        Span {
                                                            start: 7341,
                                                            end: 7373,
                                                        },
                                                    ],
                                                },
                                            },
                                            Block(
                                                Block {
                                                    body: [
                                                        Emit(
                                                            [22..26],
                                                        ),
                                                        Store {
                                                            pointer: [25],
                                                            value: [26],
                                                        },
                                                        Emit(
                                                            [27..28],
                                                        ),
                                                        Emit(
                                                            [29..31],
                                                        ),
                                                        Store {
                                                            pointer: [27],
                                                            value: [30],
                                                        },
                                                    ],
                                                    span_info: [
                                                        Span {
                                                            start: 7388,
                                                            end: 7414,
                                                        },
                                                        Span {
                                                            start: 7388,
                                                            end: 7419,
                                                        },
                                                        Span {
                                                            start: 7433,
                                                            end: 7444,
                                                        },
                                                        Span {
                                                            start: 7433,
                                                            end: 7450,
                                                        },
                                                        Span {
                                                            start: 7433,
                                                            end: 7450,
                                                        },
                                                    ],
                                                },
                                            ),
                                        ],
                                        span_info: [
                                            Span {
                                                start: 7342,
                                                end: 7353,
                                            },
                                            Span {
                                                start: 7342,
                                                end: 7373,
                                            },
                                            Span {
                                                start: 7341,
                                                end: 7373,
                                            },
                                            Span {
                                                start: 7374,
                                                end: 7451,
                                            },
                                        ],
                                    },
                                    continuing: Block {
                                        body: [],
                                        span_info: [],
                                    },
                                    break_if: None,
                                },
                                Emit(
                                    [31..33],
                                ),
                                Call {
                                    function: [8],
                                    arguments: [
                                        [31],
                                        [32],
                                    ],
                                    result: None,
                                },
                                Emit(
                                    [33..34],
                                ),
                                Store {
                                    pointer: [33],
                                    value: [34],
                                },
                            ],
                            span_info: [
                                Span {
                                    start: 7336,
                                    end: 7451,
                                },
                                Span {
                                    start: 7480,
                                    end: 7508,
                                },
                                Span {
                                    start: 7470,
                                    end: 7509,
                                },
                                Span {
                                    start: 7519,
                                    end: 7530,
                                },
                                Span {
                                    start: 7519,
                                    end: 7535,
                                },
                            ],
                        },
                        reject: Block {
                            body: [],
                            span_info: [],
                        },
                    },
                    Loop {
                        body: Block {
                            body: [
                                Emit(
                                    [35..37],
                                ),
                                Emit(
                                    [38..39],
                                ),
                                If {
                                    condition: [38],
                                    accept: Block {
                                        body: [],
                                        span_info: [],
                                    },
                                    reject: Block {
                                        body: [
                                            Break,
                                        ],
                                        span_info: [
                                            Span {
                                                start: 7575,
                                                end: 7594,
                                            },
                                        ],
                                    },
                                },
                                Block(
                                    Block {
                                        body: [
                                            Emit(
                                                [39..43],
                                            ),
                                            Store {
                                                pointer: [42],
                                                value: [43],
                                            },
                                            Emit(
                                                [44..45],
                                            ),
                                            Emit(
                                                [46..48],
                                            ),
                                            Store {
                                                pointer: [44],
                                                value: [47],
                                            },
                                        ],
                                        span_info: [
                                            Span {
                                                start: 7605,
                                                end: 7631,
                                            },
                                            Span {
                                                start: 7605,
                                                end: 7636,
                                            },
                                            Span {
                                                start: 7646,
                                                end: 7657,
                                            },
                                            Span {
                                                start: 7646,
                                                end: 7663,
                                            },
                                            Span {
                                                start: 7646,
                                                end: 7663,
                                            },
                                        ],
                                    },
                                ),
                            ],
                            span_info: [
                                Span {
                                    start: 7576,
                                    end: 7587,
                                },
                                Span {
                                    start: 7576,
                                    end: 7594,
                                },
                                Span {
                                    start: 7575,
                                    end: 7594,
                                },
                                Span {
                                    start: 7595,
                                    end: 7664,
                                },
                            ],
                        },
                        continuing: Block {
                            body: [],
                            span_info: [],
                        },
                        break_if: None,
                    },
                    Emit(
                        [48..50],
                    ),
                    Emit(
                        [51..53],
                    ),
                    Emit(
                        [54..55],
                    ),
                    Emit(
                        [55..58],
                    ),
                    Emit(
                        [59..60],
                    ),
                    Call {
                        function: [6],
                        arguments: [
                            [55],
                            [59],
                            [60],
                        ],
                        result: None,
                    },
                    Emit(
                        [61..62],
                    ),
                    Call {
                        function: [6],
                        arguments: [
                            [61],
                            [54],
                            [62],
                        ],
                        result: None,
                    },
                    Emit(
                        [63..65],
                    ),
                    Call {
                        function: [8],
                        arguments: [
                            [63],
                            [64],
                        ],
                        result: None,
                    },
                    Loop {
                        body: Block {
                            body: [
                                Emit(
                                    [67..68],
                                ),
                                Emit(
                                    [69..70],
                                ),
                                If {
                                    condition: [69],
                                    accept: Block {
                                        body: [],
                                        span_info: [],
                                    },
                                    reject: Block {
                                        body: [
                                            Break,
                                        ],
                                        span_info: [
                                            Span {
                                                start: 7991,
                                                end: 7999,
                                            },
                                        ],
                                    },
                                },
                                Block(
                                    Block {
                                        body: [
                                            Emit(
                                                [70..74],
                                            ),
                                            Emit(
                                                [75..77],
                                            ),
                                            Call {
                                                function: [7],
                                                arguments: [
                                                    [1],
                                                    [73],
                                                    [76],
                                                ],
                                                result: None,
                                            },
                                        ],
                                        span_info: [
                                            Span {
                                                start: 8036,
                                                end: 8051,
                                            },
                                            Span {
                                                start: 8053,
                                                end: 8059,
                                            },
                                            Span {
                                                start: 8015,
                                                end: 8060,
                                            },
                                        ],
                                    },
                                ),
                            ],
                            span_info: [
                                Span {
                                    start: 0,
                                    end: 0,
                                },
                                Span {
                                    start: 7992,
                                    end: 7998,
                                },
                                Span {
                                    start: 7991,
                                    end: 7999,
                                },
                                Span {
                                    start: 8005,
                                    end: 8061,
                                },
                            ],
                        },
                        continuing: Block {
                            body: [
                                Emit(
                                    [78..80],
                                ),
                                Store {
                                    pointer: [66],
                                    value: [79],
                                },
                            ],
                            span_info: [
                                Span {
                                    start: 8000,
                                    end: 8003,
                                },
                                Span {
                                    start: 8000,
                                    end: 8003,
                                },
                            ],
                        },
                        break_if: None,
                    },
                    Emit(
                        [80..81],
                    ),
                    Return {
                        value: Some(
                            [80],
                        ),
                    },
                ],
                span_info: [
                    Span {
                        start: 7089,
                        end: 7105,
                    },
                    Span {
                        start: 7176,
                        end: 7202,
                    },
                    Span {
                        start: 7176,
                        end: 7210,
                    },
                    Span {
                        start: 7216,
                        end: 7227,
                    },
                    Span {
                        start: 7216,
                        end: 7233,
                    },
                    Span {
                        start: 7216,
                        end: 7233,
                    },
                    Span {
                        start: 7307,
                        end: 7318,
                    },
                    Span {
                        start: 7307,
                        end: 7325,
                    },
                    Span {
                        start: 7304,
                        end: 7536,
                    },
                    Span {
                        start: 7570,
                        end: 7664,
                    },
                    Span {
                        start: 7745,
                        end: 7757,
                    },
                    Span {
                        start: 7744,
                        end: 7771,
                    },
                    Span {
                        start: 7743,
                        end: 7778,
                    },
                    Span {
                        start: 7796,
                        end: 7823,
                    },
                    Span {
                        start: 7811,
                        end: 7830,
                    },
                    Span {
                        start: 7784,
                        end: 7837,
                    },
                    Span {
                        start: 7855,
                        end: 7868,
                    },
                    Span {
                        start: 7843,
                        end: 7886,
                    },
                    Span {
                        start: 7903,
                        end: 7931,
                    },
                    Span {
                        start: 7893,
                        end: 7932,
                    },
                    Span {
                        start: 7975,
                        end: 8061,
                    },
                    Span {
                        start: 0,
                        end: 0,
                    },
                    Span {
                        start: 8073,
                        end: 8084,
                    },
                ],
            },
            diagnostic_filter_leaf: None,
        },
    },
    entry_points: [
        EntryPoint {
            name: "main",
            stage: Compute,
            early_depth_test: None,
            workgroup_size: [
                4,
                1,
                1,
            ],
            workgroup_size_overrides: None,
            function: Function {
                name: Some(
                    "main",
                ),
                arguments: [
                    FunctionArgument {
                        name: Some(
                            "id",
                        ),
                        ty: [16],
                        binding: Some(
                            BuiltIn(
                                GlobalInvocationId,
                            ),
                        ),
                    },
                ],
                result: None,
                local_variables: {
                    [0]: LocalVariable {
                        name: Some(
                            "ctx",
                        ),
                        ty: [5],
                        init: None,
                    },
                    [1]: LocalVariable {
                        name: Some(
                            "input",
                        ),
                        ty: [13],
                        init: None,
                    },
                    [2]: LocalVariable {
                        name: Some(
                            "hash",
                        ),
                        ty: [7],
                        init: None,
                    },
                },
                expressions: {
                    [0]: FunctionArgument(
                        0,
                    ),
                    [1]: LocalVariable(
                        [0],
                    ),
                    [2]: GlobalVariable(
                        [0],
                    ),
                    [3]: AccessIndex {
                        base: [0],
                        index: 0,
                    },
                    [4]: Access {
                        base: [2],
                        index: [3],
                    },
                    [5]: Load {
                        pointer: [4],
                    },
                    [6]: LocalVariable(
                        [1],
                    ),
                    [7]: AccessIndex {
                        base: [6],
                        index: 0,
                    },
                    [8]: AccessIndex {
                        base: [6],
                        index: 1,
                    },
                    [9]: Load {
                        pointer: [8],
                    },
                    [10]: CallResult(
                        [11],
                    ),
                    [11]: LocalVariable(
                        [2],
                    ),
                    [12]: GlobalVariable(
                        [1],
                    ),
                    [13]: AccessIndex {
                        base: [0],
                        index: 0,
                    },
                    [14]: Access {
                        base: [12],
                        index: [13],
                    },
                    [15]: Load {
                        pointer: [11],
                    },
                },
                named_expressions: {
                    [0]: "id",
                },
                body: Block {
                    body: [
                        Emit(
                            [3..6],
                        ),
                        Store {
                            pointer: [6],
                            value: [5],
                        },
                        Call {
                            function: [9],
                            arguments: [
                                [1],
                            ],
                            result: None,
                        },
                        Emit(
                            [7..10],
                        ),
                        Call {
                            function: [10],
                            arguments: [
                                [1],
                                [7],
                                [9],
                            ],
                            result: None,
                        },
                        Call {
                            function: [11],
                            arguments: [
                                [1],
                            ],
                            result: Some(
                                [10],
                            ),
                        },
                        Store {
                            pointer: [11],
                            value: [10],
                        },
                        Emit(
                            [13..16],
                        ),
                        Store {
                            pointer: [14],
                            value: [15],
                        },
                        Return {
                            value: None,
                        },
                    ],
                    span_info: [
                        Span {
                            start: 8488,
                            end: 8500,
                        },
                        Span {
                            start: 8469,
                            end: 8501,
                        },
                        Span {
                            start: 8516,
                            end: 8533,
                        },
                        Span {
                            start: 8560,
                            end: 8581,
                        },
                        Span {
                            start: 8539,
                            end: 8582,
                        },
                        Span {
                            start: 8600,
                            end: 8617,
                        },
                        Span {
                            start: 8589,
                            end: 8618,
                        },
                        Span {
                            start: 8623,
                            end: 8635,
                        },
                        Span {
                            start: 8623,
                            end: 8642,
                        },
                        Span {
                            start: 0,
                            end: 0,
                        },
                    ],
                },
                diagnostic_filter_leaf: None,
            },
        },
    ],
    diagnostic_filters: {},
    diagnostic_filter_leaf: None,
}

ModuleInfo {
    type_flags: [
        TypeFlags(
            DATA | SIZED | COPY | IO_SHAREABLE | HOST_SHAREABLE | CREATION_RESOLVED | ARGUMENT | CONSTRUCTIBLE,
        ),
        TypeFlags(
            DATA | SIZED | COPY | HOST_SHAREABLE | CREATION_RESOLVED | ARGUMENT | CONSTRUCTIBLE,
        ),
        TypeFlags(
            DATA | SIZED | COPY | HOST_SHAREABLE | CREATION_RESOLVED | ARGUMENT | CONSTRUCTIBLE,
        ),
        TypeFlags(
            DATA | SIZED | COPY | IO_SHAREABLE | HOST_SHAREABLE | CREATION_RESOLVED | ARGUMENT | CONSTRUCTIBLE,
        ),
        TypeFlags(
            DATA | SIZED | COPY | HOST_SHAREABLE | CREATION_RESOLVED | ARGUMENT | CONSTRUCTIBLE,
        ),
        TypeFlags(
            DATA | SIZED | COPY | HOST_SHAREABLE | CREATION_RESOLVED | ARGUMENT | CONSTRUCTIBLE,
        ),
        TypeFlags(
            SIZED | COPY | CREATION_RESOLVED | ARGUMENT,
        ),
        TypeFlags(
            DATA | SIZED | COPY | HOST_SHAREABLE | CREATION_RESOLVED | ARGUMENT | CONSTRUCTIBLE,
        ),
        TypeFlags(
            SIZED | COPY | CREATION_RESOLVED | ARGUMENT,
        ),
        TypeFlags(
            SIZED | COPY | CREATION_RESOLVED | ARGUMENT,
        ),
        TypeFlags(
            SIZED | COPY | CREATION_RESOLVED | ARGUMENT,
        ),
        TypeFlags(
            DATA | SIZED | COPY | HOST_SHAREABLE | CREATION_RESOLVED | ARGUMENT | CONSTRUCTIBLE,
        ),
        TypeFlags(
            SIZED | COPY | CREATION_RESOLVED | ARGUMENT,
        ),
        TypeFlags(
            DATA | SIZED | COPY | HOST_SHAREABLE | CREATION_RESOLVED | ARGUMENT | CONSTRUCTIBLE,
        ),
        TypeFlags(
            DATA | SIZED | COPY | HOST_SHAREABLE | CREATION_RESOLVED | ARGUMENT | CONSTRUCTIBLE,
        ),
        TypeFlags(
            DATA | SIZED | COPY | HOST_SHAREABLE | CREATION_RESOLVED | ARGUMENT | CONSTRUCTIBLE,
        ),
        TypeFlags(
            DATA | SIZED | COPY | IO_SHAREABLE | HOST_SHAREABLE | CREATION_RESOLVED | ARGUMENT | CONSTRUCTIBLE,
        ),
    ],
    functions: [
        FunctionInfo {
            flags: ValidationFlags(
                EXPRESSIONS | BLOCKS | CONTROL_FLOW_UNIFORMITY | STRUCT_LAYOUTS | CONSTANTS | BINDINGS,
            ),
            available_stages: ShaderStages(
                VERTEX | FRAGMENT | COMPUTE,
            ),
            uniformity: Uniformity {
                non_uniform_result: Some(
                    [0],
                ),
                requirements: UniformityRequirements(
                    0x0,
                ),
            },
            may_kill: false,
            sampling_set: {},
            global_uses: [
                GlobalUse(
                    0x0,
                ),
                GlobalUse(
                    0x0,
                ),
            ],
            expressions: [
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 2,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 2,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
            ],
            sampling: {},
            dual_source_blending: false,
            diagnostic_filter_leaf: None,
        },
        FunctionInfo {
            flags: ValidationFlags(
                EXPRESSIONS | BLOCKS | CONTROL_FLOW_UNIFORMITY | STRUCT_LAYOUTS | CONSTANTS | BINDINGS,
            ),
            available_stages: ShaderStages(
                VERTEX | FRAGMENT | COMPUTE,
            ),
            uniformity: Uniformity {
                non_uniform_result: Some(
                    [0],
                ),
                requirements: UniformityRequirements(
                    0x0,
                ),
            },
            may_kill: false,
            sampling_set: {},
            global_uses: [
                GlobalUse(
                    0x0,
                ),
                GlobalUse(
                    0x0,
                ),
            ],
            expressions: [
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 3,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
            ],
            sampling: {},
            dual_source_blending: false,
            diagnostic_filter_leaf: None,
        },
        FunctionInfo {
            flags: ValidationFlags(
                EXPRESSIONS | BLOCKS | CONTROL_FLOW_UNIFORMITY | STRUCT_LAYOUTS | CONSTANTS | BINDINGS,
            ),
            available_stages: ShaderStages(
                VERTEX | FRAGMENT | COMPUTE,
            ),
            uniformity: Uniformity {
                non_uniform_result: Some(
                    [0],
                ),
                requirements: UniformityRequirements(
                    0x0,
                ),
            },
            may_kill: false,
            sampling_set: {},
            global_uses: [
                GlobalUse(
                    0x0,
                ),
                GlobalUse(
                    0x0,
                ),
            ],
            expressions: [
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 3,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
            ],
            sampling: {},
            dual_source_blending: false,
            diagnostic_filter_leaf: None,
        },
        FunctionInfo {
            flags: ValidationFlags(
                EXPRESSIONS | BLOCKS | CONTROL_FLOW_UNIFORMITY | STRUCT_LAYOUTS | CONSTANTS | BINDINGS,
            ),
            available_stages: ShaderStages(
                VERTEX | FRAGMENT | COMPUTE,
            ),
            uniformity: Uniformity {
                non_uniform_result: Some(
                    [0],
                ),
                requirements: UniformityRequirements(
                    0x0,
                ),
            },
            may_kill: false,
            sampling_set: {},
            global_uses: [
                GlobalUse(
                    0x0,
                ),
                GlobalUse(
                    0x0,
                ),
            ],
            expressions: [
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 3,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
            ],
            sampling: {},
            dual_source_blending: false,
            diagnostic_filter_leaf: None,
        },
        FunctionInfo {
            flags: ValidationFlags(
                EXPRESSIONS | BLOCKS | CONTROL_FLOW_UNIFORMITY | STRUCT_LAYOUTS | CONSTANTS | BINDINGS,
            ),
            available_stages: ShaderStages(
                VERTEX | FRAGMENT | COMPUTE,
            ),
            uniformity: Uniformity {
                non_uniform_result: Some(
                    [0],
                ),
                requirements: UniformityRequirements(
                    0x0,
                ),
            },
            may_kill: false,
            sampling_set: {},
            global_uses: [
                GlobalUse(
                    0x0,
                ),
                GlobalUse(
                    0x0,
                ),
            ],
            expressions: [
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 3,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
            ],
            sampling: {},
            dual_source_blending: false,
            diagnostic_filter_leaf: None,
        },
        FunctionInfo {
            flags: ValidationFlags(
                EXPRESSIONS | BLOCKS | CONTROL_FLOW_UNIFORMITY | STRUCT_LAYOUTS | CONSTANTS | BINDINGS,
            ),
            available_stages: ShaderStages(
                VERTEX | FRAGMENT | COMPUTE,
            ),
            uniformity: Uniformity {
                non_uniform_result: Some(
                    [0],
                ),
                requirements: UniformityRequirements(
                    0x0,
                ),
            },
            may_kill: false,
            sampling_set: {},
            global_uses: [
                GlobalUse(
                    0x0,
                ),
                GlobalUse(
                    0x0,
                ),
            ],
            expressions: [
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 8,
                    assignable_global: None,
                    ty: Handle(
                        [6],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 8,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
            ],
            sampling: {},
            dual_source_blending: false,
            diagnostic_filter_leaf: None,
        },
        FunctionInfo {
            flags: ValidationFlags(
                EXPRESSIONS | BLOCKS | CONTROL_FLOW_UNIFORMITY | STRUCT_LAYOUTS | CONSTANTS | BINDINGS,
            ),
            available_stages: ShaderStages(
                VERTEX | FRAGMENT | COMPUTE,
            ),
            uniformity: Uniformity {
                non_uniform_result: None,
                requirements: UniformityRequirements(
                    0x0,
                ),
            },
            may_kill: false,
            sampling_set: {},
            global_uses: [
                GlobalUse(
                    0x0,
                ),
                GlobalUse(
                    0x0,
                ),
            ],
            expressions: [
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 8,
                    assignable_global: None,
                    ty: Handle(
                        [6],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 8,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 8,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
            ],
            sampling: {},
            dual_source_blending: false,
            diagnostic_filter_leaf: None,
        },
        FunctionInfo {
            flags: ValidationFlags(
                EXPRESSIONS | BLOCKS | CONTROL_FLOW_UNIFORMITY | STRUCT_LAYOUTS | CONSTANTS | BINDINGS,
            ),
            available_stages: ShaderStages(
                VERTEX | FRAGMENT | COMPUTE,
            ),
            uniformity: Uniformity {
                non_uniform_result: None,
                requirements: UniformityRequirements(
                    0x0,
                ),
            },
            may_kill: false,
            sampling_set: {},
            global_uses: [
                GlobalUse(
                    0x0,
                ),
                GlobalUse(
                    0x0,
                ),
            ],
            expressions: [
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 8,
                    assignable_global: None,
                    ty: Handle(
                        [8],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 8,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 8,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
            ],
            sampling: {},
            dual_source_blending: false,
            diagnostic_filter_leaf: None,
        },
        FunctionInfo {
            flags: ValidationFlags(
                EXPRESSIONS | BLOCKS | CONTROL_FLOW_UNIFORMITY | STRUCT_LAYOUTS | CONSTANTS | BINDINGS,
            ),
            available_stages: ShaderStages(
                VERTEX | FRAGMENT | COMPUTE,
            ),
            uniformity: Uniformity {
                non_uniform_result: Some(
                    [0],
                ),
                requirements: UniformityRequirements(
                    0x0,
                ),
            },
            may_kill: false,
            sampling_set: {},
            global_uses: [
                GlobalUse(
                    0x0,
                ),
                GlobalUse(
                    0x0,
                ),
            ],
            expressions: [
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 16,
                    assignable_global: None,
                    ty: Handle(
                        [9],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [6],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 7,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [1],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [4],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 5,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [4],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [4],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Bool,
                                width: 1,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [4],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [4],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [4],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [4],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [16],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 8,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [16],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [16],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Bool,
                                width: 1,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [16],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [16],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [16],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [16],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [16],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [16],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [16],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [16],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [16],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [16],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [16],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [52],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 7,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [55],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 6,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [58],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 6,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [61],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 4,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [64],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 7,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [67],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 5,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [70],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 5,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [73],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 4,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [75],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 5,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [75],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [75],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Bool,
                                width: 1,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [73],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [64],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [73],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [64],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [67],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [64],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [64],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [64],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [70],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [64],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [64],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [73],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [1],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [75],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [75],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [73],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [75],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [73],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 2,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [52],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [52],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [55],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [52],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [52],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [58],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [52],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [52],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [55],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [58],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [55],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [52],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [70],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [67],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [64],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [61],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [61],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [58],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [55],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [52],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [73],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [75],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [75],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 2,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [52],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 2,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [55],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 2,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [58],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 2,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [61],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 2,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [64],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 2,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [67],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 2,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [70],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 2,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [73],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
            ],
            sampling: {},
            dual_source_blending: false,
            diagnostic_filter_leaf: None,
        },
        FunctionInfo {
            flags: ValidationFlags(
                EXPRESSIONS | BLOCKS | CONTROL_FLOW_UNIFORMITY | STRUCT_LAYOUTS | CONSTANTS | BINDINGS,
            ),
            available_stages: ShaderStages(
                VERTEX | FRAGMENT | COMPUTE,
            ),
            uniformity: Uniformity {
                non_uniform_result: None,
                requirements: UniformityRequirements(
                    0x0,
                ),
            },
            may_kill: false,
            sampling_set: {},
            global_uses: [
                GlobalUse(
                    0x0,
                ),
                GlobalUse(
                    0x0,
                ),
            ],
            expressions: [
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 10,
                    assignable_global: None,
                    ty: Handle(
                        [10],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [2],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [2],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [2],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [2],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [2],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [2],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [2],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [2],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
            ],
            sampling: {},
            dual_source_blending: false,
            diagnostic_filter_leaf: None,
        },
        FunctionInfo {
            flags: ValidationFlags(
                EXPRESSIONS | BLOCKS | CONTROL_FLOW_UNIFORMITY | STRUCT_LAYOUTS | CONSTANTS | BINDINGS,
            ),
            available_stages: ShaderStages(
                VERTEX | FRAGMENT | COMPUTE,
            ),
            uniformity: Uniformity {
                non_uniform_result: Some(
                    [0],
                ),
                requirements: UniformityRequirements(
                    0x0,
                ),
            },
            may_kill: false,
            sampling_set: {},
            global_uses: [
                GlobalUse(
                    0x0,
                ),
                GlobalUse(
                    0x0,
                ),
            ],
            expressions: [
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 16,
                    assignable_global: None,
                    ty: Handle(
                        [10],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 3,
                    assignable_global: None,
                    ty: Handle(
                        [12],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [2],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [3],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 9,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [5],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 7,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Bool,
                                width: 1,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Bool,
                                width: 1,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [3],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [3],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Bool,
                                width: 1,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Bool,
                                width: 1,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [4],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [5],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 2,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [5],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [5],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [3],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [3],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Bool,
                                width: 1,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [2],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [4],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 2,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [3],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [3],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Bool,
                                width: 1,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [51],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 6,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [51],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [51],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Bool,
                                width: 1,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [4],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [51],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [5],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [51],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [5],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [51],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [51],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [2],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [4],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 2,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [5],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [5],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [3],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [3],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [79],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 5,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [79],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [3],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [79],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Bool,
                                width: 1,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [4],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [79],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [5],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [79],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [5],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [79],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [79],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [3],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
            ],
            sampling: {},
            dual_source_blending: false,
            diagnostic_filter_leaf: None,
        },
        FunctionInfo {
            flags: ValidationFlags(
                EXPRESSIONS | BLOCKS | CONTROL_FLOW_UNIFORMITY | STRUCT_LAYOUTS | CONSTANTS | BINDINGS,
            ),
            available_stages: ShaderStages(
                VERTEX | FRAGMENT | COMPUTE,
            ),
            uniformity: Uniformity {
                non_uniform_result: Some(
                    [0],
                ),
                requirements: UniformityRequirements(
                    0x0,
                ),
            },
            may_kill: false,
            sampling_set: {},
            global_uses: [
                GlobalUse(
                    0x0,
                ),
                GlobalUse(
                    0x0,
                ),
            ],
            expressions: [
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 23,
                    assignable_global: None,
                    ty: Handle(
                        [10],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 2,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [7],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 8,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [4],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 2,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Bool,
                                width: 1,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Bool,
                                width: 1,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [4],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 2,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [2],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [4],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Bool,
                                width: 1,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [4],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 2,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [4],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [4],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [2],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [4],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [66],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 5,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [66],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [66],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Bool,
                                width: 1,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [2],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [66],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [0],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [0],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [66],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [66],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [66],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [66],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [7],
                    ),
                },
            ],
            sampling: {},
            dual_source_blending: false,
            diagnostic_filter_leaf: None,
        },
    ],
    entry_points: [
        FunctionInfo {
            flags: ValidationFlags(
                EXPRESSIONS | BLOCKS | CONTROL_FLOW_UNIFORMITY | STRUCT_LAYOUTS | CONSTANTS | BINDINGS,
            ),
            available_stages: ShaderStages(
                VERTEX | FRAGMENT | COMPUTE,
            ),
            uniformity: Uniformity {
                non_uniform_result: Some(
                    [0],
                ),
                requirements: UniformityRequirements(
                    0x0,
                ),
            },
            may_kill: false,
            sampling_set: {},
            global_uses: [
                GlobalUse(
                    READ,
                ),
                GlobalUse(
                    WRITE,
                ),
            ],
            expressions: [
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 2,
                    assignable_global: None,
                    ty: Handle(
                        [16],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [1],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 3,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [5],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: None,
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: Some(
                        [0],
                    ),
                    ty: Value(
                        Pointer {
                            base: [14],
                            space: Storage {
                                access: StorageAccess(
                                    LOAD,
                                ),
                            },
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: Some(
                        [0],
                    ),
                    ty: Value(
                        Pointer {
                            base: [13],
                            space: Storage {
                                access: StorageAccess(
                                    LOAD,
                                ),
                            },
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [13],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [6],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 3,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [13],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [6],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [11],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [6],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [3],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [6],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [3],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [7],
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [11],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 2,
                    assignable_global: None,
                    ty: Value(
                        Pointer {
                            base: [7],
                            space: Function,
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [12],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: Some(
                        [1],
                    ),
                    ty: Value(
                        Pointer {
                            base: [15],
                            space: Storage {
                                access: StorageAccess(
                                    LOAD | STORE,
                                ),
                            },
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [0],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Value(
                        Scalar(
                            Scalar {
                                kind: Uint,
                                width: 4,
                            },
                        ),
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [12],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: Some(
                        [1],
                    ),
                    ty: Value(
                        Pointer {
                            base: [7],
                            space: Storage {
                                access: StorageAccess(
                                    LOAD | STORE,
                                ),
                            },
                        },
                    ),
                },
                ExpressionInfo {
                    uniformity: Uniformity {
                        non_uniform_result: Some(
                            [11],
                        ),
                        requirements: UniformityRequirements(
                            0x0,
                        ),
                    },
                    ref_count: 1,
                    assignable_global: None,
                    ty: Handle(
                        [7],
                    ),
                },
            ],
            sampling: {},
            dual_source_blending: false,
            diagnostic_filter_leaf: None,
        },
    ],
    const_expression_types: [
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Value(
            Scalar(
                Scalar {
                    kind: Uint,
                    width: 8,
                },
            ),
        ),
        Handle(
            [1],
        ),
    ],
}
